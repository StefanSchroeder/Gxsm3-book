{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gxsm-3.0 Manual https://github.com/StefanSchroeder/Gxsm3-book https://github.com/pyzahl/Gxsm3 https://github.com/pyzahl/Gxsm4 The latest PDF built from the old TeX-sources: https://github.com/StefanSchroeder/Gxsm3-book/releases/download/latest/Gxsm-3.0-Manual.pdf The latest PDF built from the onverted Markdown sources: https://github.com/StefanSchroeder/Gxsm3-book/releases/download/latest/test.pdf Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Home"},{"location":"#gxsm-30-manual","text":"https://github.com/StefanSchroeder/Gxsm3-book https://github.com/pyzahl/Gxsm3 https://github.com/pyzahl/Gxsm4 The latest PDF built from the old TeX-sources: https://github.com/StefanSchroeder/Gxsm3-book/releases/download/latest/Gxsm-3.0-Manual.pdf The latest PDF built from the onverted Markdown sources: https://github.com/StefanSchroeder/Gxsm3-book/releases/download/latest/test.pdf Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Gxsm-3.0 Manual"},{"location":"01_Gxsm-3.0-Frontmatter/","text":"","title":"Gxsm-3.0 Manual"},{"location":"02_Gxsm-3.0-Preface/","text":"Preface []{#ch:preface label=\"ch:preface\"} The GXSM history and very early predecessors are dating back to 1995. It came a long way even lived on different operating systems with initial DSP code fragments in C, Turbo-Pascal and ideas I have to give credit to Gerhard Meyer to get me started with the very very early stages of my experiences with STM control. It evolved and diverted quickly into it's very own system from then on. Other branches related to work of Ullrich K\u00f6hler aka PM-STM had some influences and eventually a PM-STM operating on OS/2 was a live. With that operating system phasing out a move to Linux was undertaken and some software named \u201cXxsm\u201d based on the X-Forms GUI was evolving and turned pretty mature by end of 2000 with a big move over to the early Gtk toolkit and Gxsm got established. From there a long and steady journey was up on it. With more and more multi-core/threadding machine little related pit-falls evolved and were hard to find and even harder to fix -- if not even unfixable without major reworking. But now in 2017 a huge move and undertaking whopped that grown up Gxsm2 over into what now is the all new Gxsm3 with a rewritten GUI at all levels and logics behind. Lasted big hit is the reimplementation of the OpenGL based 3D/Volume data view to inspect and visualize up to 5D data sets in real-time and dynamically unleashing the full power of a gaming grade GPU. GL-4.0 essential. For historical reasons the first section of the following preface will remain in German. Das Jahr 2000 ist vorraussichtlich mein letztes am Institut f\u00fcr Festk\u00f6rperphysik der Universit\u00e4t Hannover. In diesem Vorwort m\u00f6chte ich die Historie der ehemals 'nur' STM-Software festhalten. Ich habe die letzten f\u00fcnf Jahre, die Zeit vor meiner Diplomarbeit eingeschlossen, dort verbracht und in der Arbeitsgruppe von Michael Horn-von-Hoegen begonnen, mich mit der Tunnelmikroskopie und den zugeh\u00f6rigen Techniken zu besch\u00e4ftigen. Im Sommer 1995 zeigte mir A.Meier ein kleines, noch unber\u00fchrtes, unter einer Schutzhaube verborgenes Ger\u00e4t -- ein Micro STM. Wir besa\u00dfen nur dieses Ger\u00e4t zusammen mit einem Tunnelstromverst\u00e4rker, einer Signalprozessor gesteuerte Me\u00dfkarte (PC31) -- und -- dem Wissen, da\u00df damit ein gewisser G.Meyer in Berlin erfolgreich ein Ger\u00e4t gleichen Prinzips bedient. Ich machte es mir zur Aufgabe, der ganzen Sache Leben einzuhauchen ... Von G.Meyer hatte ich unterdessen einige Software zusammengesammelt und wir versuchten, die diversen DOS/Pascal Programme auf unserem hochmodernen P90 zum Laufen zu bringen. W\u00e4hrenddessen vertiefte ich mich in die Geheimnisse der DSP-Programmierung und der Kommunikation zwischen Host-PC und DSP. Des Fortschritts wegen beschlo\u00df ich, ein bereits vorhandenes OS/2-Programm namens PMSTM weiter zu entwickeln. PMSTM basierte auf einer schon erheblich \u00e4lteren OS/2 Version vonL.Anderson und wurde von H.Bethge zum Messen eingesetzt. Gleichzeitig produzierte R. Kumpe einige Assemblerroutinen zur Ansteuerung seiner Datatranslation-Karte unter OS/2 -- welche ebenfalls einen spezial STM-Eigenbau, jedoch noch mit analogem Regler, bedienen sollte. Parallel wurden mit H. Pietsch die notwendigen Zus\u00e4tze f\u00fcr AFM implementiert. Es verging einige Zeit, aber dann war es soweit: Die neue OS/2 Software konnte das Ger\u00e4t steuern und Daten aufnehmen und anzeigen. An Luft wurden erste Versuche mit Goldproben und abgeknipster Wolframspitze erfolgreich abgeschlossen. Weitere Verbesserungen in nahezu jeder Hinsicht konnte ich im Verlauf meiner Diplomarbeit einbringen -- das Ger\u00e4t war unterdessen im UHV der Maschine \"Quantum\" im Einsatz. Die Geschichte des Micro STM\u00b4s wurde im weiteren wesentlich von R.Hild bestimmt, der das h\u00f6chst empfindliche Ger\u00e4t in einem an Federn aufgeh\u00e4ngten Kupferblock mit 3D-Wirbelstromd\u00e4mpfung versenkte und somit zu H\u00f6chtstleistung brachte. Die Zeit war gegen das wunderbar stabile OS/2, es wurde zum Au\u00dfenseiter und eigentlich ben\u00f6tigte man es nur noch zum Messen ... Windows erschien mir als durchaus erfahrenem und gebrandmarktem DOS/Win3.X Programmierer als v\u00f6llig ungeeignete Plattform, so hatte ich doch die Vorz\u00fcge einer stabilen Betriebssystemplatform mit OS/2 zu sch\u00e4tzen gelernt. Ich konnte jedoch mit meinen Unix/Linux Grundkenntnissen schnell eine zukunftssichere Alternative finden und entschied, erste Versuchte mit einer neuen Software f\u00fcr mein SPA--LEED zu unternehmen. Das SPA--LEED sollte n\u00e4mlich ebenfalls mit einer Signalprozessorkarte gesteuert werden, um sp\u00e4ter ggf. ohne zus\u00e4tzlichen Aufwandt ein STM nachr\u00fcsten zu k\u00f6nnen. Das Resultat war ein Programm namens xspa, welches unter Verwendung der xforms-Library unter X11 lief. Aus diesen Erfahrungen sch\u00f6pfend entwickelte ich ein v\u00f6llig neues Konzept f\u00fcr eine grundlegend neue Struktur eines neuen STM-Programmes -- der alte Code war zu steif und beinhaltete viel zu viele globale Variablen. Auch das fixe Datenformat dat wurde als historisch abgelegt und es fand ein \u00dcbergang zu dem NetCDF-Format statt. Das neue Konzept ist objektorientiert und erm\u00f6glicht erstmals eine flexible Mehrkanal- Verwaltung und -Messung (dies wurde in PMSTM nur per Trick in unflexibler Weise zur Datenaufnahme hineigebastelt, da das AFM die gleichzeitige Aufzeichnung von Kraft und Reibungssignal erm\u00f6glicht). Es entstand xxsm, welches strukturell die Grundlage des heutigen gxsm darstellt. Dieses Programm entstand im Verlauf der Diplomarbeit von R.Hild, der die Entwicklung life mit seinem STM verfolgen mu\u00dfte bzw. durfte :=) Auch unser neues Spielzeug, ein Luft-AFM, wurde von xxsm gesteuert sowie eine Streulichtapparatur (SARLS). Die Computertechnologie schreitet unaufhaltsam vorann und es ist zu bef\u00fcrchten, da\u00df bald keine ISA-Slots mehr verf\u00fcgbar sind. So entschieden wir f\u00fcr neue Ger\u00e4te, eine PCI-Version der DSP-Karte (PCI32) zu kaufen. Diese Karte schien der PC31, mal von dem PCI-Bus abgesehen, doch sehr vergleichbar. Es gab jedoch einige Unwegsamkeiten, die mich einige Nerven kosteten ... Jedenfalls entwickelte ich ein Kernelmodul f\u00fcr diese Karte und sp\u00e4ter eine Variation f\u00fcr die alte PC31, denn auf User-Space IO konnte wegen PCI Konfiguration, etc. nicht mehr ausgewichen werden. Zus\u00e4tzlich mu\u00dften alle Utilities (Loader, Terminal) an die neue Karte angepasst werden. Eine neue Library machte das anf\u00e4ngliche Chaos komplett -- die Hoffnung, das DSP- Programm nicht umschreiben zu m\u00fcssen, war vergebens. Jedoch konnte mit einigen Tricks weiterhin eine, zwar neue, aber gemeinsame Version erhalten bleiben. Die alte xforms-Libary ist zwar extrem effizient, insbesondere meine sehr schnellen MIT-SHM Bilddarstellungsroutinen, aber die Oberfl\u00e4che und Men\u00fcdarstellung lassen einige W\u00fcnsche offen. Eine modernes Toolkit Namens Gtk+/Gnome weckte mein Interesse im Sinne des Fortbestandes und der Weiterentwicklung dieser unterdessen m\u00e4chtigen Mikroskopie- Software. Ein Kraftakt von diversen N\u00e4chten zwischen Juni und Dezember 1999 brachte xxsm im neuen Gewand als gnomified xxsm - kurz gxsm hervor. Das objektorientierte Konzept von Gtk+/Gnome vereinfachte es auch erheblich, die SPA--LEED-Ansteuerung in gxsm mitaufzunehmen. Dar\u00fcberhinaus entstanden gleichzeitig einige Tools wie Gfit, Goszi und dsp-applet. Dieses Werk soll im weiteren all denjenigen helfen, die einerseits mit gxsm arbeiten, aber auch etwas mehr \u00fcber die Internas erfahren wollen. So gliedert sich das folgende Manual in einen anwendungsbezogenen Teil; n\u00fctzliche Tips (HOWTOs zu STM und AFM); und einen Versuch das Programmkonzept zu erl\u00e4utern. Ich m\u00f6chte hier meinen Dank an alle aussprechen, die zu meiner Arbeit beigetragen haben, insbesondere jedoch: M. Henzler f\u00fcr das immer gute Instituts-Klima und die sch\u00f6nen \"Almen\". M. Horn-von-Hoegen daf\u00fcr, da\u00df er mir die Zeit zum st\u00e4ndigen Arbeiten an diesem Projekt gelassen hat. G. Meyer f\u00fcr seine Starthilfe bei der DSP Programmierung und diversen Gespr\u00e4chen. H. Bethge f\u00fcr Ihre Geduld mit mir im Keller. R. Kumpe f\u00fcr seine Mitarbeit an PMSTM und Diskussionen. H. Pietsch f\u00fcr sein Mitwirken an PMSTM. L. Anderson, den ich leider nie pers\u00f6nlich kennengelernt habe, f\u00fcr seine Arbeit an PMSTM. U. K\u00f6hler und seine Truppe f\u00fcr einige Diskussionen. A. Meier f\u00fcr seine endlose Geduld mit mir ... F.J. Meier zu Heringdorf f\u00fcr immer wieder freundlich und fr\u00f6hliche BS Discussions mit diversen Guinness. R. Hild und M. Bierkandt f\u00fcr deren Ausdauer mit den ewig neuen Versionen. A. Klust f\u00fcr alle Beitr\u00e4ge zu diesem Projekt. H. Goldbach f\u00fcr SPA--LEED Discussions und f\u00fcr den (noch nicht) herausgesuchten BF krams. Heilo f\u00fcr die Gew\u00e4hrung einer Mehraufwandzulage. Negenborn Januar 2000 Percy Zahl ... Gxsm has been licensed as GPL and goes to SourceForge.net ... Es ist Sonntag, der 21.1.2001, es schneit drau\u00dfen und die Zeit ist mal wieder ein Jahr fortgeschritten; Ich stecke mitten in meinen Vorbeitungen zum Ortswechsel von Negenborn bei Hannover nach Denver/Colorado und m\u00f6chte ein paar Bemerkungen zum Stand des Gxsm-Projekts festhalten, nachdem meine Dissertation mit der Ver\u00f6ffentlichung meines Werkes zum Stress auf Oberfl\u00e4chen abgeschlossen ist. Das Gxsm-Projekt ist seit Herbst 2000 offiziell als Open-Source auf Source-Forge via Web-Interface und CVS-Access verf\u00fcgbar. Die Verzeichnishierarchie wurde \u00fcberarbeitet und \u201cGxsm\u201d ist nun das Projekthauptverzeichnis. Im Dezember 2000 wurde ein flexibles Plug-In Interface f\u00fcr Gxsm entworfen und damit begonnen alle speziellen Erweiterungen in Plug-Ins auszulagern. Damit wird eine erhebliche Flexibilit\u00e4t erzielt. Im Januar 2001 sind ein SPA--LEED Simulationsmodul, Peak-Finder, Fokus-Tool und Oszi-Plugin hinzugekommen. Ein Support f\u00fcr die alte Burr-Brown Karte f\u00fcr SPA--LEED ist ebenfalls verf\u00fcgbar und bereits im Einsatz. Negenborn Januar 2001 Percy Zahl ... Gxsm goes international ... Just a few up-to-date remarks: As far as I know Gxsm is used now in more than four countries around the globe. Kernel 2.4.x support was implemented and is proofed to work well. More and more Plug-Ins are added ... A Gnome Druid to guide the new Gxsm user along all most important settings was added. Golden, Colorado USA, August 2001 Percy Zahl ... about one year later and the Gxsm user community is expanding worldwide -- some success? A lot of new features were added and a so called \"multi-layer\" capability was implemented, especially for use with 2D probing. The modularization via Plug-Ins is driven further, so the scanning and probing control was released from Gxsm core and turned into Plug-Ins. There is still a lot to do, but it is already producing valuable 2D STS data! Together with this development the probing modes are expanded and a experimental digital Lock-In was implemented on a combined DSP and host level. In today ongoing process the DSP software undergoes a complete redesign. While the DSP hardware future is still not clear (some great options are in sight) -- future DSP platform setups are very expensive due to hardware and development tools as well, and as long there is no funding there can't be a new implementation for this non profit project. And today we can announce the beginning of the new composed Gxsm Manual. It is partly automatic generated from Plug-In source files. Lots of thanks to Andreas for initiating this development! Golden, Colorado USA, June 16, 2002 Percy Zahl ... Gxsm-2.0 is coming and it also starts support for a new DSP platform ... It's Sunday, my official part of my two year Postdoc job at Colorado School of Mines in Golden has just passed and I'm working on my Gxsm project -- it's snowing outside for the first time since about three month of no perception at all ... Two important milestones in the Gxsm history are just in progress: Gnome 2 is now available and features several good changes and redesigns but also some non-compatible issues to be taking into account. This has now led to the new Gxsm-2.0 CVS branch and results into a new \"gxsm2\". The port is completed, including over 70 PlugIns. Some minor issues are to be treated but a functional alpha version of Gxsm-2 is available. The old PCI32,PC31 DSP cards are hopelessly out of date and not any longer easily available. And just in time the \"SignalRanger\" DSP occured, it's a via USB connected standalone DSP board. So the Linux support for SRanger-USB and some new DSP tools were developed and are available via there own SF project (http://SRanger.sf.net). The 3rd DSP soft generation for the fixed point SRanger board DSP (TMS320C5402) is currently in development, in parallel the Gxsm2 SRanger support is created -- No results yet, but it all looks promising. Golden, Colorado USA, February 2, 2003 Percy Zahl ... GXSM-2 and Signal Ranger in daily data production! It's a rainy Sunday, and the GXSM manual is going to be revised to the GXSM-2 version. The Signal Ranger documentation part is to be started ... but the Signal Ranger boards (SR-STD and SR-SP2) are now both supported -- thanks to SoftDB for the friendly loan of the STD board! Also I'm happy to say, the SR does a really good job in our lab as second/spare and testing DSP subsystem. The analog performance (noise level) is outstanding: Using a huge scanning tube (XY: 1000\u00c5/V, Z: 200\u00c5/V) it's possible to resolve the Au-herringbone and Buckyballs on Au(111)! Adliswil, Switzerland, October 5th, 2003 Percy Zahl ... GXSM-2 V1.8.4 and Signal Ranger going Multidimensional and Vector Probing Before all that, the SRanger kernel module for Linux Kernel 2.6.12 and higher was stabilized. The completion of the Vector Probe implementation just happened. The design of the low level (DSP) Vector Probe was finished for over an year but the streaming of the data was only limited working for some time, also a really user friendly GUI was pending. That all changed now. The invention of the GXSM Event mechanism finalized the new capabilities, including the raster probe mode. Also the approach and coarse motion control was polished up and now features an arbitrary wave form mode for best possible results for any inertial motion driven positioning and maximized the flexibility. And for all the future, the whole GXSM core undergo an extensive code cleanup which now totally removed all remainings of hardware close parameters. These are now banned into the corresponding HwI plugins. Rocky Point, Long Island, NY, USA, November 16th, 2005 Percy Zahl ... GXSM-2 V1.12.0 is released with full multidimensional data processing and visualization power Several new add-ons were added, in brief: more pre defined Vector-Probe modes a SignalRanger/CoolRunner CPLD based and hardware or CPLD times (gated) 32bit counter channel to acquire pulse counts/rates of any source a event logging mechanism to attach important parameter changes and probe data to the eventually running scan full core 4-dim data support and visualization now enabled transition of several math plugins to run on multi layers and time dimension on demand marker object to manually count things of different flavor (color) But the major achievement is that the GXSM core now allows handling of 2-dimensional images sets. In particular, a single scan channel can now hold stacks of images (layers) for multiple times making a true 4-dimensional data set. Data can be played like a movie in layer (at a specific time) or in time dimension (at a specific layer). Visualization of profiles (or series of profiles) can be navigated in real time with the \"Show Point\" or \"Show Line\" tool in any dimension, also image-slices in any dimension can be generated on the fly. Export of movies is possible using the Quicktime library. The new OSD (On Scan Display) allows to overlay real-time informations, like time any other parameters. Rocky Point, Long Island, NY, USA, September 18th, 2007 Percy Zahl ... GXSM-2 V1.22.0 releases and all new SPM dedicated SR-A810 The year 2009 is already going to its end, a nice sunny colorful fall day... This year has brought big changes or better upgrades on DSP level and in particular on the side of analog signal conversions. The new Signal Ranger Mark 2 (MK2) was already around for a while in 2008 and Gxsm supported with a test HwI and ported DSP code the new platform, which brought us USB-2.0 and more DSP speed and memory. But it had a drawback, even a newer revision of the AICs, it was a slow bottle neck, as it had un acceptable long loop delays. The need for some thing dedicated was even more pressing now. All started out in early summer 2008, discussions of the Gxsm team and affiliated leading Gxsm users and institutions (in particular myself and Rolf M\u00f6ller from Department of Physics, University of Duisburg-Essen, Germany) with SoftdB and their hardware engenieer B. Paillard were paving the way to the now available Analog-810 interface for the MK2 (MK2-A810). Final designs and decisions for the DA/AD converter were made about following the STM conference in Keystone, Colorado. Just a few days before Christmas 2008 I received the first prototype for the MK2-A810 assembly -- big thanks to SoftdB! As the MK2 was already fully supported by Gxsm and the driver infrastructure for the A810 was seamless to the previous, getting it going was done in a snap! This new thing was holding to it's great specs greatly and things were moving along very well. By January the first working HwI release was going into CVS and very soon was also field/labpratory STM proven to work and preform very well. In all aspects it is superior, precision, stability and speed -- 75kHz feed back loop with full loop delay less than 5 samples. Sampling rates at up to 150kHz possible (and used in latest versions). A little later two optional counter channels were added the FPGA logic. The new MK2-A810 is available since February 2009 and now also 19\" rack ready on a Gxsm/SPM customized enclosure. All basics done, the new power of the A810 was getting explored in depth and a couple of new features and software based performance improvements were implemented, let me just list: 2 channel 32-bit counter timer, syncronized with sampling Evaluation of software based resolution enhancements, Z and X/Y HR-mode Real time magnitude dependent bandwith adjusting via FIR for current input Transition to Float in Gxsm in conjunction with tarnsfer of full statistical data (32-bit resolution summed values from DSP + normalization count) FIFO data transfer optimazation: using custom byte packing, first order linear predictor... Real time configurable 4-channel feedback input mixer, lin/log/fuzzy modes Enhanced and expanded Vector-Probe modes and visualization modes (GUI) Many more details... And: A update on Gxsm and teh new MK2-A810 is submitted/accepted to Journal of Vacuum Science and Technology B (JVST B), proceedings of the NC-AFM, Yale 2009. Brookhaven National Laboratory - CFN, Upton, Long Island, NY, USA, October 29th, 2009 Percy Zahl ... from Version Numbers to \"Battenkill Warrior\", \"Lancaster Classics\", \"Lindau Historic\" to GXSM-2 V1.27.3 \"Arosa Express\" -- get prepared for the high-end MK3Pro-A810/PLL and new GXSM optimized SPM HV-Amp what is now also available: the \"Smart Piezo Drive\" with serious DSP power and featured under the hood not yet seen! Not functional but just getting a little more \"social\" -- dedication names to major mile stone version changes -- so you can chat better about versions! \"Battenkill Warrior\" is introducing a separated Z-Offset signal for scan slope compensation on analog level. Also a new so far little used/tested feature tracking VP mode to follow in real time \"gradient up\" or \"-down\". May also name it atom-tracker. Full 3D Offset control and Linear Drift Correction via automated Offset adjusting. Also added helping aids to easy determine drift manually from manually to be identified features in scan(s) via \\\"Global Position Reference Mark\\\" and Time/Drift calculation for Point markers. (New options: GXSMMenuScan/View/Coordinates/(Time + Relative) If previously a Global Reference was set via any Point/Marker Object/Global Reference Point. Massive selections of hundreds of VectorProbe data files for example from or live while raster probing via easy DnD read back is not supported and very useful for life data inspection of long mapping runs. Always on going: new additions to the universal GXSMx VP modes/tabs, including a dual folder with user arrangeable tabs for better work flow and overview. Example: segmented STS. \"Lancaster Classics\" is not providing much visible additions but introduces now a higher precision of the DSP level integer math moving to 32- and temporary 64bit for vector scan signal generations. Also further enhancements of the HR signal output mode (native 16bit to near 20 (some limitations apply) on software level) and other optimizations are included. Additions and new indicators for the PanView to incorporate GPIO and some DPS statemachine status indications. \"Lindau Historic\" -- incorporating a set of GXSMx community ideas discussed and collected at the 2011 NC-AFM in Lindau. Most visible, the new a red-profile history. Some patches needed for newer Gkt+/Gnome/X11 releases. Few more options for VP-Z. New VP feature allows to program limits/triggers to stop a VP section, for example when a certain max force is reached. Also the Mk3-A810/PLL activities are evolving and a PLL prototype is getting available in early 2011! The PLL is only suitable and dedicated for tuning fork systems with up to 75kHz detection -- it is all software based and developed by SoftdB. This means for the future is hardware speeds are moving up we will be able follow up the bandwidth! DSP code porting in under the way and this takes more hurdles than anticipated -- however with some support by SoftdB it's getting finally to a working version what still is a little beta (by end of 2011). Also new on the communities demand: A GXSMx optimized Piezo / HV Amplifier \"Smart Piezo Drive\" what includes a separate DSP for several control and monitoring tasks -- it works all standalone and fully analog, but can be hooked up via USB to a control computer for watching signals and configuring all kind of features like gains and bandwidth -- but as a novelty it also can perform linear drift corrections by itself and accepts digitally offset settings. It's now 2012 and GXSMx \"Arosa Express\" is out -- get ready for more remote and freely via Python programmable SPM actions! Now VP probing and Mover/Autoapproach can by fully controlled via Gxsm-Python-Remote (via the \"emb\" interface). Here is a little sneak peak script: import emb as gxsm gxsm.set (\"DSP_Bias\",\"0.1\") gxsm.set (\"DSP_SCurrent\",\"1.5\") gxsm.set (\"OffsetX\",\"0\") gxsm.set (\"OffsetY\",\"0\") gxsm.action (\"DSP_CMD_AUTOAPP\") for x in range (0,1000,100): gxsm.set (\"OffsetX\",\"%f\"%x) gxsm.sleep (10) gxsm.set (\"DSP_IV-Start-End\",\"-1\") gxsm.set (\"DSP_IV-End\",\"1\") gxsm.action (\"DSP_VP_IV_EXECUTE\") gxsm.sleep (10) PS: New Motto: \"Gxsm is a glove to your SPM experiment\" -- this said, we claim you have free hands to do pretty much all you like in a instant real time feedback experience -- but be warned, this also means you can dig your tip into the surface if you want to also if you do not take care as there is pretty much no way to distinguish unless introduction mostly annoying safety \u201cblocks\u201d. Brookhaven National Laboratory - CFN, Upton, Long Island, NY, USA, March 6th, 2012 Percy Zahl Signal Revolution: \u201cSnowy Janus Hack\u201d + \u201cSnowy Janus Signal Warrior\u201d with Mark3-Pro-A810-PLL \u201cAnd soon I realized the power of the new dimension I added!\u201d An evolving idea leading out of an dilemma unleashing not yet seen power and configurability -- a digital patch-rack with a lot of transparency and insights. Double power for users and developers -- live \"signal\" or variable debugging and monitoring. Why I am doing this? How? What is it and where will it go and what can I do with it? Let me try to explain: A need for even more real time flexibility and the need to access even more data channels/signals -- to manage a huge expansion of the \"signal space\". This is no more possible and not good to handle efficiently with a fixed signal to channel assignment due to a limited number of total channel I can handle for several reasons. However, there are more than enough channels, just a growing variety of different \\\"data\\\" or \\\"signals\\\" beyond the raw analog inputs and you will never need all of them the same time. So that lead me to a new approach I already started initially to get out of the dilemma I found myself getting into and soon I realized the power of the new dimension I added! The \"PAC/PLL\" signals needed to be accessible... that we have now for a while (Mk3) via the configuration of a signal source via a pull down menu for now each Feedback Mixer Input 0..3. And again those can be remapped (MIX0..3) -- still names (PAC1..3 in the scan channel source selector for 2d scans). I need to clean up the signal naming conventions -- part of the over haul. That's the harder part on GUI level. Plan executed: Each signal got a unique name, a value range and real world unit associated. You are still with me? I hope ... Signals are simply variables and connections are made via just pointing the input to the source -- as simple as this -- \"signals\" will be \"hot pluggable\". The current DSP code in state machine design will remain unchanged in its proven design form, only so far fixed signal paths will be \"broken up\" and made open to be hot reroutable with more connectivity options, more data sources exposed to Gxsm via existing channels and at other locations as needed. The existing data processing blocks starting with ADC inputs, PAC-siganls, counters, control values (like Bias)..., Scan, Offset Move, Probe, LockIn, ... and finally a HR Output block with new options... I will call from now on modules. And data/variables resulting from module data processing I will name signals. The default power-up signal linkage will be pretty much the default as known from the past. A kind of netlist will be exposed to Gxsm and configuration tools to be manipulated hot. So we have module input \"nodes\" and moudule output \"signals\" made available for netting up! Let me break up the existing design in existing modules as sketched: Outputs will be more configurable and not any more hard assigned -- just a default! They will get a input stage with the signal input and two additional adding inputs (modulation, etc.) with optional gain. To handle all this a new cleaned up python basic based support class and a configurator script with monitoring goodies and a signal grph visualization tool is now available. Also a signal configuration management with to flash store and auto restore there is. On Gxsm level you will feel home pretty much right away -- only several sources are now not fixed any mroe but allow to choose form multiple signals. Also signals are categorized in classes so not always all need to be exposed to prevent a \"GUI over load\". That said -- enjoy the new nex generation and a few handy and eye candy monitoring galvos, a signal scope and a new tuning tool with peak auto-fit. Well, read about the actual outcome in the SRanger Mk2/3 HwI plugin chapter [SR-Mark3] {reference-type=\"ref\" reference=\"SR-Mark3\"}.\\ Gxsm Central, Rocky Point, Long Island, NY, USA, March 29th, 2014 Percy Zahl Got High Speed? Real Time Engine 4 GXSM-3.50: \"Next Level RTime Engine\" with Mark3-Pro-A810-PLL and RedPitaya []{#high-speed label=\"high-speed\"} \"It was long rocky way! It is way too long since myt last update here. But finally a e- or re-volution.\" We got a all new fully high definiton capable GTK3 compliant GUI! That was some act. Beside many many new features, Gxsm is now all into nc-AFM and provided dedicated tools for molecular imaging. Alongside a in many aspects enhanced Gxsm python console with gxsm utility libraraies and include functionality and a growing python support libraray. The MK3 convergence detector aks PAC-PLL is great, but suffers on bandwith and statistics. So after a major act of learning and FPGA hacking the first ever 125MHz dual PAC-PLL and all bells and whistels including super fast amplitude controller, Q-control option and ultra wide range PLL operating with 48 bit phase/freq. control was born. After proof of principle some unexpected efforts needed to put in to create a reliable, fast and real time digital data link to the DSP -- featuring now a McBSP serial link operating over a potentially longer set of two CAT5 cables (about 2m in use right now). This triggered some interrupt collision issues serving the McBSP on the DSP side fast and on time. With great help and insights from Alex at SoftdB the problem was tracked and a solution sketched up. May be for the good, a major revision of the historically more monolytic data processing scheme was on the table. A single hint... and I ended up creating my very own micro kernel and real time machine on a 1/150kHz time scale. Evaluating and optimizing tasks, moving every bit of code not fully real time critical into new idle tasks. Also new a automatic RT task scheduling and enable/disable control -- all DSP based -- still provides a seamless and 100% backwards compatile DSP code from the \"outside\" point of view. Oh, no .... I need to rewrite the DSP under the hood section now. But for the good, things just got better and faster!\\ Gxsm Central, Upton, Long Island, NY, USA, April 19th, 2019 Percy Zahl","title":"Preface"},{"location":"02_Gxsm-3.0-Preface/#preface","text":"[]{#ch:preface label=\"ch:preface\"} The GXSM history and very early predecessors are dating back to 1995. It came a long way even lived on different operating systems with initial DSP code fragments in C, Turbo-Pascal and ideas I have to give credit to Gerhard Meyer to get me started with the very very early stages of my experiences with STM control. It evolved and diverted quickly into it's very own system from then on. Other branches related to work of Ullrich K\u00f6hler aka PM-STM had some influences and eventually a PM-STM operating on OS/2 was a live. With that operating system phasing out a move to Linux was undertaken and some software named \u201cXxsm\u201d based on the X-Forms GUI was evolving and turned pretty mature by end of 2000 with a big move over to the early Gtk toolkit and Gxsm got established. From there a long and steady journey was up on it. With more and more multi-core/threadding machine little related pit-falls evolved and were hard to find and even harder to fix -- if not even unfixable without major reworking. But now in 2017 a huge move and undertaking whopped that grown up Gxsm2 over into what now is the all new Gxsm3 with a rewritten GUI at all levels and logics behind. Lasted big hit is the reimplementation of the OpenGL based 3D/Volume data view to inspect and visualize up to 5D data sets in real-time and dynamically unleashing the full power of a gaming grade GPU. GL-4.0 essential. For historical reasons the first section of the following preface will remain in German. Das Jahr 2000 ist vorraussichtlich mein letztes am Institut f\u00fcr Festk\u00f6rperphysik der Universit\u00e4t Hannover. In diesem Vorwort m\u00f6chte ich die Historie der ehemals 'nur' STM-Software festhalten. Ich habe die letzten f\u00fcnf Jahre, die Zeit vor meiner Diplomarbeit eingeschlossen, dort verbracht und in der Arbeitsgruppe von Michael Horn-von-Hoegen begonnen, mich mit der Tunnelmikroskopie und den zugeh\u00f6rigen Techniken zu besch\u00e4ftigen. Im Sommer 1995 zeigte mir A.Meier ein kleines, noch unber\u00fchrtes, unter einer Schutzhaube verborgenes Ger\u00e4t -- ein Micro STM. Wir besa\u00dfen nur dieses Ger\u00e4t zusammen mit einem Tunnelstromverst\u00e4rker, einer Signalprozessor gesteuerte Me\u00dfkarte (PC31) -- und -- dem Wissen, da\u00df damit ein gewisser G.Meyer in Berlin erfolgreich ein Ger\u00e4t gleichen Prinzips bedient. Ich machte es mir zur Aufgabe, der ganzen Sache Leben einzuhauchen ... Von G.Meyer hatte ich unterdessen einige Software zusammengesammelt und wir versuchten, die diversen DOS/Pascal Programme auf unserem hochmodernen P90 zum Laufen zu bringen. W\u00e4hrenddessen vertiefte ich mich in die Geheimnisse der DSP-Programmierung und der Kommunikation zwischen Host-PC und DSP. Des Fortschritts wegen beschlo\u00df ich, ein bereits vorhandenes OS/2-Programm namens PMSTM weiter zu entwickeln. PMSTM basierte auf einer schon erheblich \u00e4lteren OS/2 Version vonL.Anderson und wurde von H.Bethge zum Messen eingesetzt. Gleichzeitig produzierte R. Kumpe einige Assemblerroutinen zur Ansteuerung seiner Datatranslation-Karte unter OS/2 -- welche ebenfalls einen spezial STM-Eigenbau, jedoch noch mit analogem Regler, bedienen sollte. Parallel wurden mit H. Pietsch die notwendigen Zus\u00e4tze f\u00fcr AFM implementiert. Es verging einige Zeit, aber dann war es soweit: Die neue OS/2 Software konnte das Ger\u00e4t steuern und Daten aufnehmen und anzeigen. An Luft wurden erste Versuche mit Goldproben und abgeknipster Wolframspitze erfolgreich abgeschlossen. Weitere Verbesserungen in nahezu jeder Hinsicht konnte ich im Verlauf meiner Diplomarbeit einbringen -- das Ger\u00e4t war unterdessen im UHV der Maschine \"Quantum\" im Einsatz. Die Geschichte des Micro STM\u00b4s wurde im weiteren wesentlich von R.Hild bestimmt, der das h\u00f6chst empfindliche Ger\u00e4t in einem an Federn aufgeh\u00e4ngten Kupferblock mit 3D-Wirbelstromd\u00e4mpfung versenkte und somit zu H\u00f6chtstleistung brachte. Die Zeit war gegen das wunderbar stabile OS/2, es wurde zum Au\u00dfenseiter und eigentlich ben\u00f6tigte man es nur noch zum Messen ... Windows erschien mir als durchaus erfahrenem und gebrandmarktem DOS/Win3.X Programmierer als v\u00f6llig ungeeignete Plattform, so hatte ich doch die Vorz\u00fcge einer stabilen Betriebssystemplatform mit OS/2 zu sch\u00e4tzen gelernt. Ich konnte jedoch mit meinen Unix/Linux Grundkenntnissen schnell eine zukunftssichere Alternative finden und entschied, erste Versuchte mit einer neuen Software f\u00fcr mein SPA--LEED zu unternehmen. Das SPA--LEED sollte n\u00e4mlich ebenfalls mit einer Signalprozessorkarte gesteuert werden, um sp\u00e4ter ggf. ohne zus\u00e4tzlichen Aufwandt ein STM nachr\u00fcsten zu k\u00f6nnen. Das Resultat war ein Programm namens xspa, welches unter Verwendung der xforms-Library unter X11 lief. Aus diesen Erfahrungen sch\u00f6pfend entwickelte ich ein v\u00f6llig neues Konzept f\u00fcr eine grundlegend neue Struktur eines neuen STM-Programmes -- der alte Code war zu steif und beinhaltete viel zu viele globale Variablen. Auch das fixe Datenformat dat wurde als historisch abgelegt und es fand ein \u00dcbergang zu dem NetCDF-Format statt. Das neue Konzept ist objektorientiert und erm\u00f6glicht erstmals eine flexible Mehrkanal- Verwaltung und -Messung (dies wurde in PMSTM nur per Trick in unflexibler Weise zur Datenaufnahme hineigebastelt, da das AFM die gleichzeitige Aufzeichnung von Kraft und Reibungssignal erm\u00f6glicht). Es entstand xxsm, welches strukturell die Grundlage des heutigen gxsm darstellt. Dieses Programm entstand im Verlauf der Diplomarbeit von R.Hild, der die Entwicklung life mit seinem STM verfolgen mu\u00dfte bzw. durfte :=) Auch unser neues Spielzeug, ein Luft-AFM, wurde von xxsm gesteuert sowie eine Streulichtapparatur (SARLS). Die Computertechnologie schreitet unaufhaltsam vorann und es ist zu bef\u00fcrchten, da\u00df bald keine ISA-Slots mehr verf\u00fcgbar sind. So entschieden wir f\u00fcr neue Ger\u00e4te, eine PCI-Version der DSP-Karte (PCI32) zu kaufen. Diese Karte schien der PC31, mal von dem PCI-Bus abgesehen, doch sehr vergleichbar. Es gab jedoch einige Unwegsamkeiten, die mich einige Nerven kosteten ... Jedenfalls entwickelte ich ein Kernelmodul f\u00fcr diese Karte und sp\u00e4ter eine Variation f\u00fcr die alte PC31, denn auf User-Space IO konnte wegen PCI Konfiguration, etc. nicht mehr ausgewichen werden. Zus\u00e4tzlich mu\u00dften alle Utilities (Loader, Terminal) an die neue Karte angepasst werden. Eine neue Library machte das anf\u00e4ngliche Chaos komplett -- die Hoffnung, das DSP- Programm nicht umschreiben zu m\u00fcssen, war vergebens. Jedoch konnte mit einigen Tricks weiterhin eine, zwar neue, aber gemeinsame Version erhalten bleiben. Die alte xforms-Libary ist zwar extrem effizient, insbesondere meine sehr schnellen MIT-SHM Bilddarstellungsroutinen, aber die Oberfl\u00e4che und Men\u00fcdarstellung lassen einige W\u00fcnsche offen. Eine modernes Toolkit Namens Gtk+/Gnome weckte mein Interesse im Sinne des Fortbestandes und der Weiterentwicklung dieser unterdessen m\u00e4chtigen Mikroskopie- Software. Ein Kraftakt von diversen N\u00e4chten zwischen Juni und Dezember 1999 brachte xxsm im neuen Gewand als gnomified xxsm - kurz gxsm hervor. Das objektorientierte Konzept von Gtk+/Gnome vereinfachte es auch erheblich, die SPA--LEED-Ansteuerung in gxsm mitaufzunehmen. Dar\u00fcberhinaus entstanden gleichzeitig einige Tools wie Gfit, Goszi und dsp-applet. Dieses Werk soll im weiteren all denjenigen helfen, die einerseits mit gxsm arbeiten, aber auch etwas mehr \u00fcber die Internas erfahren wollen. So gliedert sich das folgende Manual in einen anwendungsbezogenen Teil; n\u00fctzliche Tips (HOWTOs zu STM und AFM); und einen Versuch das Programmkonzept zu erl\u00e4utern. Ich m\u00f6chte hier meinen Dank an alle aussprechen, die zu meiner Arbeit beigetragen haben, insbesondere jedoch: M. Henzler f\u00fcr das immer gute Instituts-Klima und die sch\u00f6nen \"Almen\". M. Horn-von-Hoegen daf\u00fcr, da\u00df er mir die Zeit zum st\u00e4ndigen Arbeiten an diesem Projekt gelassen hat. G. Meyer f\u00fcr seine Starthilfe bei der DSP Programmierung und diversen Gespr\u00e4chen. H. Bethge f\u00fcr Ihre Geduld mit mir im Keller. R. Kumpe f\u00fcr seine Mitarbeit an PMSTM und Diskussionen. H. Pietsch f\u00fcr sein Mitwirken an PMSTM. L. Anderson, den ich leider nie pers\u00f6nlich kennengelernt habe, f\u00fcr seine Arbeit an PMSTM. U. K\u00f6hler und seine Truppe f\u00fcr einige Diskussionen. A. Meier f\u00fcr seine endlose Geduld mit mir ... F.J. Meier zu Heringdorf f\u00fcr immer wieder freundlich und fr\u00f6hliche BS Discussions mit diversen Guinness. R. Hild und M. Bierkandt f\u00fcr deren Ausdauer mit den ewig neuen Versionen. A. Klust f\u00fcr alle Beitr\u00e4ge zu diesem Projekt. H. Goldbach f\u00fcr SPA--LEED Discussions und f\u00fcr den (noch nicht) herausgesuchten BF krams. Heilo f\u00fcr die Gew\u00e4hrung einer Mehraufwandzulage. Negenborn Januar 2000 Percy Zahl ... Gxsm has been licensed as GPL and goes to SourceForge.net ... Es ist Sonntag, der 21.1.2001, es schneit drau\u00dfen und die Zeit ist mal wieder ein Jahr fortgeschritten; Ich stecke mitten in meinen Vorbeitungen zum Ortswechsel von Negenborn bei Hannover nach Denver/Colorado und m\u00f6chte ein paar Bemerkungen zum Stand des Gxsm-Projekts festhalten, nachdem meine Dissertation mit der Ver\u00f6ffentlichung meines Werkes zum Stress auf Oberfl\u00e4chen abgeschlossen ist. Das Gxsm-Projekt ist seit Herbst 2000 offiziell als Open-Source auf Source-Forge via Web-Interface und CVS-Access verf\u00fcgbar. Die Verzeichnishierarchie wurde \u00fcberarbeitet und \u201cGxsm\u201d ist nun das Projekthauptverzeichnis. Im Dezember 2000 wurde ein flexibles Plug-In Interface f\u00fcr Gxsm entworfen und damit begonnen alle speziellen Erweiterungen in Plug-Ins auszulagern. Damit wird eine erhebliche Flexibilit\u00e4t erzielt. Im Januar 2001 sind ein SPA--LEED Simulationsmodul, Peak-Finder, Fokus-Tool und Oszi-Plugin hinzugekommen. Ein Support f\u00fcr die alte Burr-Brown Karte f\u00fcr SPA--LEED ist ebenfalls verf\u00fcgbar und bereits im Einsatz. Negenborn Januar 2001 Percy Zahl ... Gxsm goes international ... Just a few up-to-date remarks: As far as I know Gxsm is used now in more than four countries around the globe. Kernel 2.4.x support was implemented and is proofed to work well. More and more Plug-Ins are added ... A Gnome Druid to guide the new Gxsm user along all most important settings was added. Golden, Colorado USA, August 2001 Percy Zahl ... about one year later and the Gxsm user community is expanding worldwide -- some success? A lot of new features were added and a so called \"multi-layer\" capability was implemented, especially for use with 2D probing. The modularization via Plug-Ins is driven further, so the scanning and probing control was released from Gxsm core and turned into Plug-Ins. There is still a lot to do, but it is already producing valuable 2D STS data! Together with this development the probing modes are expanded and a experimental digital Lock-In was implemented on a combined DSP and host level. In today ongoing process the DSP software undergoes a complete redesign. While the DSP hardware future is still not clear (some great options are in sight) -- future DSP platform setups are very expensive due to hardware and development tools as well, and as long there is no funding there can't be a new implementation for this non profit project. And today we can announce the beginning of the new composed Gxsm Manual. It is partly automatic generated from Plug-In source files. Lots of thanks to Andreas for initiating this development! Golden, Colorado USA, June 16, 2002 Percy Zahl ... Gxsm-2.0 is coming and it also starts support for a new DSP platform ... It's Sunday, my official part of my two year Postdoc job at Colorado School of Mines in Golden has just passed and I'm working on my Gxsm project -- it's snowing outside for the first time since about three month of no perception at all ... Two important milestones in the Gxsm history are just in progress: Gnome 2 is now available and features several good changes and redesigns but also some non-compatible issues to be taking into account. This has now led to the new Gxsm-2.0 CVS branch and results into a new \"gxsm2\". The port is completed, including over 70 PlugIns. Some minor issues are to be treated but a functional alpha version of Gxsm-2 is available. The old PCI32,PC31 DSP cards are hopelessly out of date and not any longer easily available. And just in time the \"SignalRanger\" DSP occured, it's a via USB connected standalone DSP board. So the Linux support for SRanger-USB and some new DSP tools were developed and are available via there own SF project (http://SRanger.sf.net). The 3rd DSP soft generation for the fixed point SRanger board DSP (TMS320C5402) is currently in development, in parallel the Gxsm2 SRanger support is created -- No results yet, but it all looks promising. Golden, Colorado USA, February 2, 2003 Percy Zahl ... GXSM-2 and Signal Ranger in daily data production! It's a rainy Sunday, and the GXSM manual is going to be revised to the GXSM-2 version. The Signal Ranger documentation part is to be started ... but the Signal Ranger boards (SR-STD and SR-SP2) are now both supported -- thanks to SoftDB for the friendly loan of the STD board! Also I'm happy to say, the SR does a really good job in our lab as second/spare and testing DSP subsystem. The analog performance (noise level) is outstanding: Using a huge scanning tube (XY: 1000\u00c5/V, Z: 200\u00c5/V) it's possible to resolve the Au-herringbone and Buckyballs on Au(111)! Adliswil, Switzerland, October 5th, 2003 Percy Zahl ... GXSM-2 V1.8.4 and Signal Ranger going Multidimensional and Vector Probing Before all that, the SRanger kernel module for Linux Kernel 2.6.12 and higher was stabilized. The completion of the Vector Probe implementation just happened. The design of the low level (DSP) Vector Probe was finished for over an year but the streaming of the data was only limited working for some time, also a really user friendly GUI was pending. That all changed now. The invention of the GXSM Event mechanism finalized the new capabilities, including the raster probe mode. Also the approach and coarse motion control was polished up and now features an arbitrary wave form mode for best possible results for any inertial motion driven positioning and maximized the flexibility. And for all the future, the whole GXSM core undergo an extensive code cleanup which now totally removed all remainings of hardware close parameters. These are now banned into the corresponding HwI plugins. Rocky Point, Long Island, NY, USA, November 16th, 2005 Percy Zahl ... GXSM-2 V1.12.0 is released with full multidimensional data processing and visualization power Several new add-ons were added, in brief: more pre defined Vector-Probe modes a SignalRanger/CoolRunner CPLD based and hardware or CPLD times (gated) 32bit counter channel to acquire pulse counts/rates of any source a event logging mechanism to attach important parameter changes and probe data to the eventually running scan full core 4-dim data support and visualization now enabled transition of several math plugins to run on multi layers and time dimension on demand marker object to manually count things of different flavor (color) But the major achievement is that the GXSM core now allows handling of 2-dimensional images sets. In particular, a single scan channel can now hold stacks of images (layers) for multiple times making a true 4-dimensional data set. Data can be played like a movie in layer (at a specific time) or in time dimension (at a specific layer). Visualization of profiles (or series of profiles) can be navigated in real time with the \"Show Point\" or \"Show Line\" tool in any dimension, also image-slices in any dimension can be generated on the fly. Export of movies is possible using the Quicktime library. The new OSD (On Scan Display) allows to overlay real-time informations, like time any other parameters. Rocky Point, Long Island, NY, USA, September 18th, 2007 Percy Zahl ... GXSM-2 V1.22.0 releases and all new SPM dedicated SR-A810 The year 2009 is already going to its end, a nice sunny colorful fall day... This year has brought big changes or better upgrades on DSP level and in particular on the side of analog signal conversions. The new Signal Ranger Mark 2 (MK2) was already around for a while in 2008 and Gxsm supported with a test HwI and ported DSP code the new platform, which brought us USB-2.0 and more DSP speed and memory. But it had a drawback, even a newer revision of the AICs, it was a slow bottle neck, as it had un acceptable long loop delays. The need for some thing dedicated was even more pressing now. All started out in early summer 2008, discussions of the Gxsm team and affiliated leading Gxsm users and institutions (in particular myself and Rolf M\u00f6ller from Department of Physics, University of Duisburg-Essen, Germany) with SoftdB and their hardware engenieer B. Paillard were paving the way to the now available Analog-810 interface for the MK2 (MK2-A810). Final designs and decisions for the DA/AD converter were made about following the STM conference in Keystone, Colorado. Just a few days before Christmas 2008 I received the first prototype for the MK2-A810 assembly -- big thanks to SoftdB! As the MK2 was already fully supported by Gxsm and the driver infrastructure for the A810 was seamless to the previous, getting it going was done in a snap! This new thing was holding to it's great specs greatly and things were moving along very well. By January the first working HwI release was going into CVS and very soon was also field/labpratory STM proven to work and preform very well. In all aspects it is superior, precision, stability and speed -- 75kHz feed back loop with full loop delay less than 5 samples. Sampling rates at up to 150kHz possible (and used in latest versions). A little later two optional counter channels were added the FPGA logic. The new MK2-A810 is available since February 2009 and now also 19\" rack ready on a Gxsm/SPM customized enclosure. All basics done, the new power of the A810 was getting explored in depth and a couple of new features and software based performance improvements were implemented, let me just list: 2 channel 32-bit counter timer, syncronized with sampling Evaluation of software based resolution enhancements, Z and X/Y HR-mode Real time magnitude dependent bandwith adjusting via FIR for current input Transition to Float in Gxsm in conjunction with tarnsfer of full statistical data (32-bit resolution summed values from DSP + normalization count) FIFO data transfer optimazation: using custom byte packing, first order linear predictor... Real time configurable 4-channel feedback input mixer, lin/log/fuzzy modes Enhanced and expanded Vector-Probe modes and visualization modes (GUI) Many more details... And: A update on Gxsm and teh new MK2-A810 is submitted/accepted to Journal of Vacuum Science and Technology B (JVST B), proceedings of the NC-AFM, Yale 2009. Brookhaven National Laboratory - CFN, Upton, Long Island, NY, USA, October 29th, 2009 Percy Zahl ... from Version Numbers to \"Battenkill Warrior\", \"Lancaster Classics\", \"Lindau Historic\" to GXSM-2 V1.27.3 \"Arosa Express\" -- get prepared for the high-end MK3Pro-A810/PLL and new GXSM optimized SPM HV-Amp what is now also available: the \"Smart Piezo Drive\" with serious DSP power and featured under the hood not yet seen! Not functional but just getting a little more \"social\" -- dedication names to major mile stone version changes -- so you can chat better about versions! \"Battenkill Warrior\" is introducing a separated Z-Offset signal for scan slope compensation on analog level. Also a new so far little used/tested feature tracking VP mode to follow in real time \"gradient up\" or \"-down\". May also name it atom-tracker. Full 3D Offset control and Linear Drift Correction via automated Offset adjusting. Also added helping aids to easy determine drift manually from manually to be identified features in scan(s) via \\\"Global Position Reference Mark\\\" and Time/Drift calculation for Point markers. (New options: GXSMMenuScan/View/Coordinates/(Time + Relative) If previously a Global Reference was set via any Point/Marker Object/Global Reference Point. Massive selections of hundreds of VectorProbe data files for example from or live while raster probing via easy DnD read back is not supported and very useful for life data inspection of long mapping runs. Always on going: new additions to the universal GXSMx VP modes/tabs, including a dual folder with user arrangeable tabs for better work flow and overview. Example: segmented STS. \"Lancaster Classics\" is not providing much visible additions but introduces now a higher precision of the DSP level integer math moving to 32- and temporary 64bit for vector scan signal generations. Also further enhancements of the HR signal output mode (native 16bit to near 20 (some limitations apply) on software level) and other optimizations are included. Additions and new indicators for the PanView to incorporate GPIO and some DPS statemachine status indications. \"Lindau Historic\" -- incorporating a set of GXSMx community ideas discussed and collected at the 2011 NC-AFM in Lindau. Most visible, the new a red-profile history. Some patches needed for newer Gkt+/Gnome/X11 releases. Few more options for VP-Z. New VP feature allows to program limits/triggers to stop a VP section, for example when a certain max force is reached. Also the Mk3-A810/PLL activities are evolving and a PLL prototype is getting available in early 2011! The PLL is only suitable and dedicated for tuning fork systems with up to 75kHz detection -- it is all software based and developed by SoftdB. This means for the future is hardware speeds are moving up we will be able follow up the bandwidth! DSP code porting in under the way and this takes more hurdles than anticipated -- however with some support by SoftdB it's getting finally to a working version what still is a little beta (by end of 2011). Also new on the communities demand: A GXSMx optimized Piezo / HV Amplifier \"Smart Piezo Drive\" what includes a separate DSP for several control and monitoring tasks -- it works all standalone and fully analog, but can be hooked up via USB to a control computer for watching signals and configuring all kind of features like gains and bandwidth -- but as a novelty it also can perform linear drift corrections by itself and accepts digitally offset settings. It's now 2012 and GXSMx \"Arosa Express\" is out -- get ready for more remote and freely via Python programmable SPM actions! Now VP probing and Mover/Autoapproach can by fully controlled via Gxsm-Python-Remote (via the \"emb\" interface). Here is a little sneak peak script: import emb as gxsm gxsm.set (\"DSP_Bias\",\"0.1\") gxsm.set (\"DSP_SCurrent\",\"1.5\") gxsm.set (\"OffsetX\",\"0\") gxsm.set (\"OffsetY\",\"0\") gxsm.action (\"DSP_CMD_AUTOAPP\") for x in range (0,1000,100): gxsm.set (\"OffsetX\",\"%f\"%x) gxsm.sleep (10) gxsm.set (\"DSP_IV-Start-End\",\"-1\") gxsm.set (\"DSP_IV-End\",\"1\") gxsm.action (\"DSP_VP_IV_EXECUTE\") gxsm.sleep (10) PS: New Motto: \"Gxsm is a glove to your SPM experiment\" -- this said, we claim you have free hands to do pretty much all you like in a instant real time feedback experience -- but be warned, this also means you can dig your tip into the surface if you want to also if you do not take care as there is pretty much no way to distinguish unless introduction mostly annoying safety \u201cblocks\u201d. Brookhaven National Laboratory - CFN, Upton, Long Island, NY, USA, March 6th, 2012 Percy Zahl Signal Revolution: \u201cSnowy Janus Hack\u201d + \u201cSnowy Janus Signal Warrior\u201d with Mark3-Pro-A810-PLL \u201cAnd soon I realized the power of the new dimension I added!\u201d An evolving idea leading out of an dilemma unleashing not yet seen power and configurability -- a digital patch-rack with a lot of transparency and insights. Double power for users and developers -- live \"signal\" or variable debugging and monitoring. Why I am doing this? How? What is it and where will it go and what can I do with it? Let me try to explain: A need for even more real time flexibility and the need to access even more data channels/signals -- to manage a huge expansion of the \"signal space\". This is no more possible and not good to handle efficiently with a fixed signal to channel assignment due to a limited number of total channel I can handle for several reasons. However, there are more than enough channels, just a growing variety of different \\\"data\\\" or \\\"signals\\\" beyond the raw analog inputs and you will never need all of them the same time. So that lead me to a new approach I already started initially to get out of the dilemma I found myself getting into and soon I realized the power of the new dimension I added! The \"PAC/PLL\" signals needed to be accessible... that we have now for a while (Mk3) via the configuration of a signal source via a pull down menu for now each Feedback Mixer Input 0..3. And again those can be remapped (MIX0..3) -- still names (PAC1..3 in the scan channel source selector for 2d scans). I need to clean up the signal naming conventions -- part of the over haul. That's the harder part on GUI level. Plan executed: Each signal got a unique name, a value range and real world unit associated. You are still with me? I hope ... Signals are simply variables and connections are made via just pointing the input to the source -- as simple as this -- \"signals\" will be \"hot pluggable\". The current DSP code in state machine design will remain unchanged in its proven design form, only so far fixed signal paths will be \"broken up\" and made open to be hot reroutable with more connectivity options, more data sources exposed to Gxsm via existing channels and at other locations as needed. The existing data processing blocks starting with ADC inputs, PAC-siganls, counters, control values (like Bias)..., Scan, Offset Move, Probe, LockIn, ... and finally a HR Output block with new options... I will call from now on modules. And data/variables resulting from module data processing I will name signals. The default power-up signal linkage will be pretty much the default as known from the past. A kind of netlist will be exposed to Gxsm and configuration tools to be manipulated hot. So we have module input \"nodes\" and moudule output \"signals\" made available for netting up! Let me break up the existing design in existing modules as sketched: Outputs will be more configurable and not any more hard assigned -- just a default! They will get a input stage with the signal input and two additional adding inputs (modulation, etc.) with optional gain. To handle all this a new cleaned up python basic based support class and a configurator script with monitoring goodies and a signal grph visualization tool is now available. Also a signal configuration management with to flash store and auto restore there is. On Gxsm level you will feel home pretty much right away -- only several sources are now not fixed any mroe but allow to choose form multiple signals. Also signals are categorized in classes so not always all need to be exposed to prevent a \"GUI over load\". That said -- enjoy the new nex generation and a few handy and eye candy monitoring galvos, a signal scope and a new tuning tool with peak auto-fit. Well, read about the actual outcome in the SRanger Mk2/3 HwI plugin chapter [SR-Mark3] {reference-type=\"ref\" reference=\"SR-Mark3\"}.\\ Gxsm Central, Rocky Point, Long Island, NY, USA, March 29th, 2014 Percy Zahl Got High Speed? Real Time Engine 4 GXSM-3.50: \"Next Level RTime Engine\" with Mark3-Pro-A810-PLL and RedPitaya []{#high-speed label=\"high-speed\"} \"It was long rocky way! It is way too long since myt last update here. But finally a e- or re-volution.\" We got a all new fully high definiton capable GTK3 compliant GUI! That was some act. Beside many many new features, Gxsm is now all into nc-AFM and provided dedicated tools for molecular imaging. Alongside a in many aspects enhanced Gxsm python console with gxsm utility libraraies and include functionality and a growing python support libraray. The MK3 convergence detector aks PAC-PLL is great, but suffers on bandwith and statistics. So after a major act of learning and FPGA hacking the first ever 125MHz dual PAC-PLL and all bells and whistels including super fast amplitude controller, Q-control option and ultra wide range PLL operating with 48 bit phase/freq. control was born. After proof of principle some unexpected efforts needed to put in to create a reliable, fast and real time digital data link to the DSP -- featuring now a McBSP serial link operating over a potentially longer set of two CAT5 cables (about 2m in use right now). This triggered some interrupt collision issues serving the McBSP on the DSP side fast and on time. With great help and insights from Alex at SoftdB the problem was tracked and a solution sketched up. May be for the good, a major revision of the historically more monolytic data processing scheme was on the table. A single hint... and I ended up creating my very own micro kernel and real time machine on a 1/150kHz time scale. Evaluating and optimizing tasks, moving every bit of code not fully real time critical into new idle tasks. Also new a automatic RT task scheduling and enable/disable control -- all DSP based -- still provides a seamless and 100% backwards compatile DSP code from the \"outside\" point of view. Oh, no .... I need to rewrite the DSP under the hood section now. But for the good, things just got better and faster!\\ Gxsm Central, Upton, Long Island, NY, USA, April 19th, 2019 Percy Zahl","title":"Preface"},{"location":"03_Gxsm-3.0-Intro/","text":"Front Matter {#ch:frontmatter} The Gxsm Project: Gxsm itself, drivers, utilities, demos and documentation \\ Copyright (C) 1999 - 2022 Percy Zahl, Andreas Klust, et al\\ Email: mailzahl@users.sourceforge.net \\ WWW: http://gxsm.sourceforge.net This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; see the file COPYING. If not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. See the end of this document for complete license: Appendix [app:gpl] {reference-type=\"ref\" reference=\"app:gpl\"} Introduction []{#ch:intro label=\"ch:intro\"} GXSM[^1] -- Gnome X Scanning Microscopy -- is a powerful graphical interface for any kind of 2D and 3D (multi layered 2D mode) data acquisition methods, especially designed for scanning probe microscopy (SPM). The aim of the GXSM-project is to provide a versatile control system being suitable to operate all different kinds of scanning probe microscopes. This includes in particular scanning tunneling microscopes (STMs) and atomic force microscopes (AFMs), but it is not restricted to these types. In principle, it is also flexible enough to operate scanning angle resolved light scattering (SARLS) experiments or spot profile analysis of low-energy electron diffraction (SPA-LEED) optics. One reason for this versatility is that all these instrument have in common a 2D-data acquisition by scanning sequentially points in the $xy$-plane. Certainly, GXSM gains also versatility, because of its design concept: a DSP (digital signal processor) based hardware is used for the data acquisition, the scan signal generation and various feedback lopes ($z$ distance between tip and sample but also the oscillation control of an NC-AFM). The graphical user interface (GUI) provides not only tools for 1D (line profiles), 2D (images), 3D (morphology), and even 4D (time series) data visualization, but also for manipulation and analysis. As the GUI is based on plug-ins, it can be easily extended to new tasks. A third aspect is the python interface of GXSM allowing to control the GUI remotely at almost real-time level. The performance of the python scripting is more than sufficient to provide a functionality far beyond batch acquisition and processing of data, but also allowing to code complex data aquisition tasks without programming anything directly on DSP level. The project was founded at the Institute for Solid State Physics[^2] Leading developer of GXSM is Percy Zahl[^3], but more than 50 SPM groups world wide are not just using GXSM but also contribute to its further development. The program was developed for Linux[^4] using the Gtk$+$/Gnome libraries[^5] for the GUI. And best of all: it's free! GXSM is licensed under the terms of the GNU General Public License (GPL, see [app:gpl] {reference-type=\"ref\" reference=\"app:gpl\"}). Therefore, everyone can copy, use, and modify GXSM for his/her needs provided that the resulting software is again published under the GPL licence. The following list gives a short overview on the main features of GXSM: Support for STM, AFM, and any other 2D (2D layered and multi-channel) data-acquisition method can be supported by GXSM. The GXSM core handles multiple channels of 2D (layered) data fields of arbitrary type and unlimited size and a grey-scale or false color view of 2D data image, using \"on the fly\" data transformation as there are: \"Quick\": a line regression and subtraction is performed on each scan-line \"Direct\": only contrast and brightness adjustments \"Direct HiLit\": same as direct but marks the lowest and highest values \"Plane\": on-the-fly 3-point defined plane subtraction \"Logarithmic\": logarithmic scaling mode, almost used by diffraction methods \"Horizontal\": automatic line average subtraction \"Differential\": view of X-derivative, $[Z(X+1)-Z(X)]$ \"Periodic\": like \"Direct\" Mode, but grey-scale is applied modulo #grey-levels More sophisticated background correction and data analysis methods are implemented as filters. For more details on the different modes of the visualization of the data see Chap. [ch:visual] {reference-type=\"ref\" reference=\"ch:visual\"}. Data presentation is by default a (grey or false color) image but it can be switched to a profile view (1d), profile extraction on the fly... Or you can use a 3D shaded view (using OpenGL 4.6) which now offers a sophisticated scene setup. The \"high-level\" scan controller is now separated from the GXSM core and is build as PlugIn, while the real-time \"low-level\" scanning process, data-acquisition and feedback loop (if needed), runs on the DSP -- if present, else a dummy image is produced. The current scan-line, marked in red, can be viewed simultaneously as profile. (View$\\rightarrow$red Profile) Extremely flexible configuration of user settings and data acquisition and probe modes. Easy to extend by Plug-ins, some examples of existing Plug-ins: Background correction methods Image filtering 1D and 2D, including several methods for Fourier transformation Image analysis/statistics: histogram, step analysis, ... Geometric transformations: scaling, rotation, affine, ... and more, write and contribute your favorite math Plug-in for GXSM! Don't be afraid, there is a step by step instruction tutorial and a math Plug-in generator, all you need to do is to add your math code! Special datafile/formats import/export filters, (extensible via PlugIns): a set of simple raw formats (.byt, .sht, .flt, ...), see [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} Digital Instruments/Veeco Metrology Group, NanoScope (import) (go to http://veeco.com to learn more, see [pi:nanoimport] {reference-type=\"ref\" reference=\"pi:nanoimport\"}) Omicron NanoTechnology, Scala ( http://www.omicron.de , see [pi:OmicronIO] {reference-type=\"ref\" reference=\"pi:OmicronIO\"}) WSxM/Nanotec Electronica SPM, WSxM ( http://wwww.nanotec.es , see [pi:WSxMio] {reference-type=\"ref\" reference=\"pi:WSxMio\"}) SDF (Surface Data Format, see [pi:sdfimport] {reference-type=\"ref\" reference=\"pi:sdfimport\"}) UK2000 v3.4, see [pi:UK2kimport] {reference-type=\"ref\" reference=\"pi:UK2kimport\"} G. Meyer STMAFM, see [pi:gmeyerimexport] {reference-type=\"ref\" reference=\"pi:gmeyerimexport\"} Park Scientific (AFM, basic import support, see [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"}) \"d2d\" data format (SPA--LEED), used by \"spa4\" and \"xspa\", see [pi:spa4imexport] {reference-type=\"ref\" reference=\"pi:spa4imexport\"} any NetCDF file containing a 2D data array Grey Images in .pgm format (P5 type), see [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"} PNG image format, see [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"} Targa (.tga) export, in 8/16/24bits color depth, [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} Special instrument control Plug-Ins: a Scan Control Panel SPM: DSP Control: Feedback and Scan Characteristics (Speed, ...) SPM: Mover/slider and auto approach controls SPM: flexible Probing: Spectroscopy (STS), Force-Distance Curves in AFM, using the DSP also Digital LockIn Probing (e.g. dI/dU (U)) is possible without any additional hardware! But not only SPM, I already ran our Quadrupole Mass Analyzer with it! Phase Lock Loop (PLL) operation in combination with the SR-MK3Pro & A810 boards (with enabled PLL option) NanoPlotter Plug-in: reads simple HPGL files and moves along the plot path using predefined DSP settings (U, I, Feedback Parameters, Speed, ...) for \"Pen-Up\" and \"Pen-Down\" movements. This was in principle already possible via the remote control and a script, but now it's much more convenient and user friendly! Even the path is shown ... can be modified, saved and re-plotted! A Plug-in categorization mechanism automatically only loads the Plug-ins for the actual setup: E.g. no Hardware Control Plug-ins are loaded in \"offline\" Data Analysis Mode. At the time there are more than 80 Plug-ins. GXSM itself is fully hardware independent. It provides a generic hardware-interface (HwI) plugin infrastructure to attach any kind of hardware. The HwI has to manage low level tasks and pass the data to the GXSM core, plus, it has to provide the necessary GUI to provide user access and control to hardware/instrument specific parameters and tasks. Scan parameter changing on the fly -- you can modify the feedback parameters or switch the tunneling voltage while scanning in between scan lines. For example: Imagine you are scanning a STM topography and current Image, the surface looks flat, then just change the feedback parameters to CP=0 and CI=1e-5 (something small) and now you are in constant height mode! On the fly, even while scanning is in progress, you can view profiles, extract data parts, re-scale -- just do all you like! Event mechanism: User \"Events\" like bias change are now logged and attached to the scan data and can be visualized (Position marker). Other events like \"Probe\" (any kind of spectroscopy or manipulation) while or after scanning are automatically attached to the scan with all data and can be visualized via a single mouse click. The same for automatic rastered \"Probe\" scanning. Python Remote Control Interface: The GXSM scanning progress is scriptable using Python. Or may be used to automatize math/data analysis tasks. Cross Platform: works on i386 and PPC based Linux distributions; a Windows port besides the main stream is available http://wgxsm4w.sf.net . GXSM takes full advantage of the NetCDF data format. Scan auto saving, session logging, Plug-in details browser, NC-View, PS-Printing and a Icon generator are available too. The GXSM software can be divided into three parts: First, the GXSM core providing the main functionality for handling and visualization of data described in the first part of this manual. The basic functions of the GXSM core can be extended using plug-ins. Plug-ins are small pieces of software dynamically linked to the core. The plug-ins are described in the second part of the manual. The third part documents the digital signal processing (DSP) software needed to carry out actual measurements. The DSP software is not necessary for applications using GXSM only for data analysis purposes. [^1]: The Project can be found in the Internet at http://gxsm.sourceforge.net [^2]: Institut f\u00fcr Festk\u00f6rperphysik, Universit\u00e4t Hannover, Appelstra\u00dfe 2, D-30167 Hannover, Germany\\ www.fkp.uni-hannover.de [^3]: E-mail: zahl@users.sourceforge.net [^4]: For example Debian 9.3. [^5]: GXSM currently requires Gnome 3.2 and GTK+ 3.22","title":"Intro"},{"location":"03_Gxsm-3.0-Intro/#front-matter-chfrontmatter","text":"The Gxsm Project: Gxsm itself, drivers, utilities, demos and documentation \\ Copyright (C) 1999 - 2022 Percy Zahl, Andreas Klust, et al\\ Email: mailzahl@users.sourceforge.net \\ WWW: http://gxsm.sourceforge.net This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; see the file COPYING. If not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. See the end of this document for complete license: Appendix [app:gpl] {reference-type=\"ref\" reference=\"app:gpl\"}","title":"Front Matter {#ch:frontmatter}"},{"location":"03_Gxsm-3.0-Intro/#introduction","text":"[]{#ch:intro label=\"ch:intro\"} GXSM[^1] -- Gnome X Scanning Microscopy -- is a powerful graphical interface for any kind of 2D and 3D (multi layered 2D mode) data acquisition methods, especially designed for scanning probe microscopy (SPM). The aim of the GXSM-project is to provide a versatile control system being suitable to operate all different kinds of scanning probe microscopes. This includes in particular scanning tunneling microscopes (STMs) and atomic force microscopes (AFMs), but it is not restricted to these types. In principle, it is also flexible enough to operate scanning angle resolved light scattering (SARLS) experiments or spot profile analysis of low-energy electron diffraction (SPA-LEED) optics. One reason for this versatility is that all these instrument have in common a 2D-data acquisition by scanning sequentially points in the $xy$-plane. Certainly, GXSM gains also versatility, because of its design concept: a DSP (digital signal processor) based hardware is used for the data acquisition, the scan signal generation and various feedback lopes ($z$ distance between tip and sample but also the oscillation control of an NC-AFM). The graphical user interface (GUI) provides not only tools for 1D (line profiles), 2D (images), 3D (morphology), and even 4D (time series) data visualization, but also for manipulation and analysis. As the GUI is based on plug-ins, it can be easily extended to new tasks. A third aspect is the python interface of GXSM allowing to control the GUI remotely at almost real-time level. The performance of the python scripting is more than sufficient to provide a functionality far beyond batch acquisition and processing of data, but also allowing to code complex data aquisition tasks without programming anything directly on DSP level. The project was founded at the Institute for Solid State Physics[^2] Leading developer of GXSM is Percy Zahl[^3], but more than 50 SPM groups world wide are not just using GXSM but also contribute to its further development. The program was developed for Linux[^4] using the Gtk$+$/Gnome libraries[^5] for the GUI. And best of all: it's free! GXSM is licensed under the terms of the GNU General Public License (GPL, see [app:gpl] {reference-type=\"ref\" reference=\"app:gpl\"}). Therefore, everyone can copy, use, and modify GXSM for his/her needs provided that the resulting software is again published under the GPL licence. The following list gives a short overview on the main features of GXSM: Support for STM, AFM, and any other 2D (2D layered and multi-channel) data-acquisition method can be supported by GXSM. The GXSM core handles multiple channels of 2D (layered) data fields of arbitrary type and unlimited size and a grey-scale or false color view of 2D data image, using \"on the fly\" data transformation as there are: \"Quick\": a line regression and subtraction is performed on each scan-line \"Direct\": only contrast and brightness adjustments \"Direct HiLit\": same as direct but marks the lowest and highest values \"Plane\": on-the-fly 3-point defined plane subtraction \"Logarithmic\": logarithmic scaling mode, almost used by diffraction methods \"Horizontal\": automatic line average subtraction \"Differential\": view of X-derivative, $[Z(X+1)-Z(X)]$ \"Periodic\": like \"Direct\" Mode, but grey-scale is applied modulo #grey-levels More sophisticated background correction and data analysis methods are implemented as filters. For more details on the different modes of the visualization of the data see Chap. [ch:visual] {reference-type=\"ref\" reference=\"ch:visual\"}. Data presentation is by default a (grey or false color) image but it can be switched to a profile view (1d), profile extraction on the fly... Or you can use a 3D shaded view (using OpenGL 4.6) which now offers a sophisticated scene setup. The \"high-level\" scan controller is now separated from the GXSM core and is build as PlugIn, while the real-time \"low-level\" scanning process, data-acquisition and feedback loop (if needed), runs on the DSP -- if present, else a dummy image is produced. The current scan-line, marked in red, can be viewed simultaneously as profile. (View$\\rightarrow$red Profile) Extremely flexible configuration of user settings and data acquisition and probe modes. Easy to extend by Plug-ins, some examples of existing Plug-ins: Background correction methods Image filtering 1D and 2D, including several methods for Fourier transformation Image analysis/statistics: histogram, step analysis, ... Geometric transformations: scaling, rotation, affine, ... and more, write and contribute your favorite math Plug-in for GXSM! Don't be afraid, there is a step by step instruction tutorial and a math Plug-in generator, all you need to do is to add your math code! Special datafile/formats import/export filters, (extensible via PlugIns): a set of simple raw formats (.byt, .sht, .flt, ...), see [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} Digital Instruments/Veeco Metrology Group, NanoScope (import) (go to http://veeco.com to learn more, see [pi:nanoimport] {reference-type=\"ref\" reference=\"pi:nanoimport\"}) Omicron NanoTechnology, Scala ( http://www.omicron.de , see [pi:OmicronIO] {reference-type=\"ref\" reference=\"pi:OmicronIO\"}) WSxM/Nanotec Electronica SPM, WSxM ( http://wwww.nanotec.es , see [pi:WSxMio] {reference-type=\"ref\" reference=\"pi:WSxMio\"}) SDF (Surface Data Format, see [pi:sdfimport] {reference-type=\"ref\" reference=\"pi:sdfimport\"}) UK2000 v3.4, see [pi:UK2kimport] {reference-type=\"ref\" reference=\"pi:UK2kimport\"} G. Meyer STMAFM, see [pi:gmeyerimexport] {reference-type=\"ref\" reference=\"pi:gmeyerimexport\"} Park Scientific (AFM, basic import support, see [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"}) \"d2d\" data format (SPA--LEED), used by \"spa4\" and \"xspa\", see [pi:spa4imexport] {reference-type=\"ref\" reference=\"pi:spa4imexport\"} any NetCDF file containing a 2D data array Grey Images in .pgm format (P5 type), see [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"} PNG image format, see [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"} Targa (.tga) export, in 8/16/24bits color depth, [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} Special instrument control Plug-Ins: a Scan Control Panel SPM: DSP Control: Feedback and Scan Characteristics (Speed, ...) SPM: Mover/slider and auto approach controls SPM: flexible Probing: Spectroscopy (STS), Force-Distance Curves in AFM, using the DSP also Digital LockIn Probing (e.g. dI/dU (U)) is possible without any additional hardware! But not only SPM, I already ran our Quadrupole Mass Analyzer with it! Phase Lock Loop (PLL) operation in combination with the SR-MK3Pro & A810 boards (with enabled PLL option) NanoPlotter Plug-in: reads simple HPGL files and moves along the plot path using predefined DSP settings (U, I, Feedback Parameters, Speed, ...) for \"Pen-Up\" and \"Pen-Down\" movements. This was in principle already possible via the remote control and a script, but now it's much more convenient and user friendly! Even the path is shown ... can be modified, saved and re-plotted! A Plug-in categorization mechanism automatically only loads the Plug-ins for the actual setup: E.g. no Hardware Control Plug-ins are loaded in \"offline\" Data Analysis Mode. At the time there are more than 80 Plug-ins. GXSM itself is fully hardware independent. It provides a generic hardware-interface (HwI) plugin infrastructure to attach any kind of hardware. The HwI has to manage low level tasks and pass the data to the GXSM core, plus, it has to provide the necessary GUI to provide user access and control to hardware/instrument specific parameters and tasks. Scan parameter changing on the fly -- you can modify the feedback parameters or switch the tunneling voltage while scanning in between scan lines. For example: Imagine you are scanning a STM topography and current Image, the surface looks flat, then just change the feedback parameters to CP=0 and CI=1e-5 (something small) and now you are in constant height mode! On the fly, even while scanning is in progress, you can view profiles, extract data parts, re-scale -- just do all you like! Event mechanism: User \"Events\" like bias change are now logged and attached to the scan data and can be visualized (Position marker). Other events like \"Probe\" (any kind of spectroscopy or manipulation) while or after scanning are automatically attached to the scan with all data and can be visualized via a single mouse click. The same for automatic rastered \"Probe\" scanning. Python Remote Control Interface: The GXSM scanning progress is scriptable using Python. Or may be used to automatize math/data analysis tasks. Cross Platform: works on i386 and PPC based Linux distributions; a Windows port besides the main stream is available http://wgxsm4w.sf.net . GXSM takes full advantage of the NetCDF data format. Scan auto saving, session logging, Plug-in details browser, NC-View, PS-Printing and a Icon generator are available too. The GXSM software can be divided into three parts: First, the GXSM core providing the main functionality for handling and visualization of data described in the first part of this manual. The basic functions of the GXSM core can be extended using plug-ins. Plug-ins are small pieces of software dynamically linked to the core. The plug-ins are described in the second part of the manual. The third part documents the digital signal processing (DSP) software needed to carry out actual measurements. The DSP software is not necessary for applications using GXSM only for data analysis purposes. [^1]: The Project can be found in the Internet at http://gxsm.sourceforge.net [^2]: Institut f\u00fcr Festk\u00f6rperphysik, Universit\u00e4t Hannover, Appelstra\u00dfe 2, D-30167 Hannover, Germany\\ www.fkp.uni-hannover.de [^3]: E-mail: zahl@users.sourceforge.net [^4]: For example Debian 9.3. [^5]: GXSM currently requires Gnome 3.2 and GTK+ 3.22","title":"Introduction"},{"location":"04_Gxsm-3.0-Quickstart/","text":"GXSM Quick Start Guide {#cha:Gxsm-quick} In this chapter, we will briefly described to configure GXSM after installation to operate one of SoftdB's Open Source SPM controller, i.e. MK2-A810 or MK3Pro-PLL. Please, make sure that you have installed a recent version of GXSM and the proper kernel modules before continuing. For further instructions to install GXSM see Chap. [cha:Gxsm-install] {reference-type=\"ref\" reference=\"cha:Gxsm-install\"}. There is also a chapter explaining how to upload the DSP binary to your Open Source SPM controller. GXSMHintIn case, you want to start over with 'fresh' settings, please follow the instructions below in Sec. 1.2 {reference-type=\"ref\" reference=\"sec:Gxsm-quick-ResetingSettings\"} Storing and Restoring Settings {#sec:Gxsm-quick-StoringSettings} To save and archive/backup simply do this to save it in a file named for example gxsm3-dconf-dump: dconf dump /org/gnome/gxsm3/ $>$ gxsm3-dconf-dump and to restore simply read it back -- sure this will overwrite any current settings: dconf load /org/gnome/gxsm3/ $>$ gxsm3-dconf-dump GXSMNote It is strongly adviced to exit GXSM while storing/restoring settings. To manually inspect it you may use (sure with caution) the dconf-editor as well. Delete Settings {#sec:Gxsm-quick-ResetingSettings} If required you can delete all settings stored by GXSM in the dconf by dconf reset -f /org/gnome/gxsm3/ GXSMNote The / at the command is important to manipulate the whole tree and not just a single entry.","title":"Quickstart"},{"location":"04_Gxsm-3.0-Quickstart/#gxsm-quick-start-guide-chagxsm-quick","text":"In this chapter, we will briefly described to configure GXSM after installation to operate one of SoftdB's Open Source SPM controller, i.e. MK2-A810 or MK3Pro-PLL. Please, make sure that you have installed a recent version of GXSM and the proper kernel modules before continuing. For further instructions to install GXSM see Chap. [cha:Gxsm-install] {reference-type=\"ref\" reference=\"cha:Gxsm-install\"}. There is also a chapter explaining how to upload the DSP binary to your Open Source SPM controller. GXSMHintIn case, you want to start over with 'fresh' settings, please follow the instructions below in Sec. 1.2 {reference-type=\"ref\" reference=\"sec:Gxsm-quick-ResetingSettings\"}","title":"GXSM\u00a0Quick Start Guide {#cha:Gxsm-quick}"},{"location":"04_Gxsm-3.0-Quickstart/#storing-and-restoring-settings-secgxsm-quick-storingsettings","text":"To save and archive/backup simply do this to save it in a file named for example gxsm3-dconf-dump: dconf dump /org/gnome/gxsm3/ $>$ gxsm3-dconf-dump and to restore simply read it back -- sure this will overwrite any current settings: dconf load /org/gnome/gxsm3/ $>$ gxsm3-dconf-dump GXSMNote It is strongly adviced to exit GXSM while storing/restoring settings. To manually inspect it you may use (sure with caution) the dconf-editor as well.","title":"Storing and Restoring Settings {#sec:Gxsm-quick-StoringSettings}"},{"location":"04_Gxsm-3.0-Quickstart/#delete-settings-secgxsm-quick-resetingsettings","text":"If required you can delete all settings stored by GXSM in the dconf by dconf reset -f /org/gnome/gxsm3/ GXSMNote The / at the command is important to manipulate the whole tree and not just a single entry.","title":"Delete Settings {#sec:Gxsm-quick-ResetingSettings}"},{"location":"05_Gxsm-3.0-Hacks/","text":"GXSM Tips and Tricks {#cha:Gxsm-hacks} Running Two Instances of GXSM Problem : \\ You want to run a second instance of GXSM without interfering with a running measurement. Underlying issue : \\ Because of GXSM's and glib's new application management, any attempt to start a new instance on the same user session/account will not spawn a new process per default, but connect to an existing GXSM process -- no matter if the system is running with hardware connected or not. This is unfortunate in case that you want an independent process for just reviewing data on the same login/X11 display while running GXSM in data aquisition mode at the same time. Solution : \\ Follow these steps: -------- ------------------------------------------------------------ Step 1 Create a new user account. As root run `#adduser alice` Step 2 Setup a password for the new user. Step 3 Run as the new user: `$ssh -X alice@localhost gxsm3 -h no` Note: SSHD must be configured to allow X11-forwarding. -------- ------------------------------------------------------------","title":"Hacks"},{"location":"05_Gxsm-3.0-Hacks/#gxsm-tips-and-tricks-chagxsm-hacks","text":"","title":"GXSM\u00a0Tips and Tricks {#cha:Gxsm-hacks}"},{"location":"05_Gxsm-3.0-Hacks/#running-two-instances-of-gxsm","text":"Problem : \\ You want to run a second instance of GXSM without interfering with a running measurement. Underlying issue : \\ Because of GXSM's and glib's new application management, any attempt to start a new instance on the same user session/account will not spawn a new process per default, but connect to an existing GXSM process -- no matter if the system is running with hardware connected or not. This is unfortunate in case that you want an independent process for just reviewing data on the same login/X11 display while running GXSM in data aquisition mode at the same time. Solution : \\ Follow these steps: -------- ------------------------------------------------------------ Step 1 Create a new user account. As root run `#adduser alice` Step 2 Setup a password for the new user. Step 3 Run as the new user: `$ssh -X alice@localhost gxsm3 -h no` Note: SSHD must be configured to allow X11-forwarding. -------- ------------------------------------------------------------","title":"Running Two Instances of GXSM"},{"location":"06a_Gxsm-3.0-General/","text":"Program Start {#ch:start} This chapter describes the very basics of GXSM usage: the start of the program. In a modern Gnome3 (gnome-shell based) desktop environment with a proper installed gxsm3 you will find the GXSM in the Aplication menu, can seek via gnome-sell command, etc. and place it into your quick start application bar. However, some of its behavior can be modified using the command line parameters described in section X.X {reference-type=\"ref\" reference=\"sec:start:command-line-pars\"}. Command line parameters {#sec:start:command-line-pars} To start from a command line just type -- no special options at all:\\ gxsm3 or for temporary hardware disabling, very handy for data analysis on your system configured for hardware usage by default:\\ gxsm3 -h no Hint: It is recommended to use this as default handler of File\\*.nc Mime-File types, i.e. used by Nautilus to launch GXSM while clicking a data file. To list all understood command line options type: gxsm3 -- --help ~$ gxsm3 --help Usage: gxsm3 [OPTION...] List of loadable file(s) .nc, ... Help Options: -?, --help Show help options --help-all Show all help options --help-gtk Show GTK+ Options Application Options: -V, --version Show the application's version -h, --hardware-card Hardware Card: no | ... (depends on available HwI plugins) -d, --Hardware-DSPDev Hardware DSP Device Path: /dev/sranger0 | ... (depends on module type and index if multiple DSPs) -u, --User-Unit XYZ Unit: AA | nm | um | mm | BZ | sec | V | 1 -L, --logging-level Set Gxsm logging/monitor level. omit all loggings: 0, minimal logging: 1, default logging: 2, verbose logging: 3, ... -m, --load-files-as-movie load file from command in one channel as movie --disable-plugins Disable default plugin loading on startup --force-configure Force to reconfigure Gxsm on startup --force-rebuild-configuration-defaults Forces to restore all GXSM values to build in defaults at startup --write-gxsm-preferences-gschema Generate Gxsm preferences gschema file on startup with build in defaults and exit --write-gxsm-gl-preferences-gschema Generate Gxsm GL preferences gschema file on startup with build in defaults and exit --write-gxsm-pcs-gschema Generate Gxsm pcs gschema file on startup with build in defaults while execution --write-gxsm-pcs-adj-gschema Generate Gxsm pcs adjustements gschema file on startup with build in defaults while execution -D, --debug-level=DN Set Gxsm debug level. 0: no debug output on console, 1: normal, 2: more verbose, ...5 increased verbosity -P, --pi-debug-level=PDN Set Gxsm Plug-In debug level. 0: no debug output on console, 1: normal, 2: more verbose, ...5 increased verbosity -s, --new-instance Start a new instance of gxsm3 -- not yet functional, use different user account via ssh -X... for now. --display=DISPLAY X display to use ::: center ::: {#tab:command-line} Parameter Description -h, --Hardware-Card= type set up type of hardware no do not use any hardware, analysis/simulation mode ... depends on available HwIs -u, --User-Unit= unit XYZ unit AA \u00c5, $1e-10$ m nm nm, $1e-9$ m --disable-plugins Disables the loading of plugins on startup mainly for debugging. : Command line parameters for calling Gxsm ::: ::: Right after the options shown above you can list files for opening to the free channels. All known formats are autodetected. [pi:WSxMio] {reference-type=\"ref\" reference=\"pi:WSxMio\"} [pi:nanoimport] {reference-type=\"ref\" reference=\"pi:nanoimport\"} [pi:OmicronIO] {reference-type=\"ref\" reference=\"pi:OmicronIO\"} [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} [pi:sdfimport] {reference-type=\"ref\" reference=\"pi:sdfimport\"} [pi:UK2kimport] {reference-type=\"ref\" reference=\"pi:UK2kimport\"} [pi:gmeyerimexport] {reference-type=\"ref\" reference=\"pi:gmeyerimexport\"} [pi:spa4imexport] {reference-type=\"ref\" reference=\"pi:spa4imexport\"} [pi:GdatImExport] {reference-type=\"ref\" reference=\"pi:GdatImExport\"} [pi:PsiHDFimexport] {reference-type=\"ref\" reference=\"pi:PsiHDFimexport\"} [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"}","title":"General"},{"location":"06a_Gxsm-3.0-General/#program-start-chstart","text":"This chapter describes the very basics of GXSM usage: the start of the program. In a modern Gnome3 (gnome-shell based) desktop environment with a proper installed gxsm3 you will find the GXSM in the Aplication menu, can seek via gnome-sell command, etc. and place it into your quick start application bar. However, some of its behavior can be modified using the command line parameters described in section X.X {reference-type=\"ref\" reference=\"sec:start:command-line-pars\"}.","title":"Program Start {#ch:start}"},{"location":"06a_Gxsm-3.0-General/#command-line-parameters-secstartcommand-line-pars","text":"To start from a command line just type -- no special options at all:\\ gxsm3 or for temporary hardware disabling, very handy for data analysis on your system configured for hardware usage by default:\\ gxsm3 -h no Hint: It is recommended to use this as default handler of File\\*.nc Mime-File types, i.e. used by Nautilus to launch GXSM while clicking a data file. To list all understood command line options type: gxsm3 -- --help ~$ gxsm3 --help Usage: gxsm3 [OPTION...] List of loadable file(s) .nc, ... Help Options: -?, --help Show help options --help-all Show all help options --help-gtk Show GTK+ Options Application Options: -V, --version Show the application's version -h, --hardware-card Hardware Card: no | ... (depends on available HwI plugins) -d, --Hardware-DSPDev Hardware DSP Device Path: /dev/sranger0 | ... (depends on module type and index if multiple DSPs) -u, --User-Unit XYZ Unit: AA | nm | um | mm | BZ | sec | V | 1 -L, --logging-level Set Gxsm logging/monitor level. omit all loggings: 0, minimal logging: 1, default logging: 2, verbose logging: 3, ... -m, --load-files-as-movie load file from command in one channel as movie --disable-plugins Disable default plugin loading on startup --force-configure Force to reconfigure Gxsm on startup --force-rebuild-configuration-defaults Forces to restore all GXSM values to build in defaults at startup --write-gxsm-preferences-gschema Generate Gxsm preferences gschema file on startup with build in defaults and exit --write-gxsm-gl-preferences-gschema Generate Gxsm GL preferences gschema file on startup with build in defaults and exit --write-gxsm-pcs-gschema Generate Gxsm pcs gschema file on startup with build in defaults while execution --write-gxsm-pcs-adj-gschema Generate Gxsm pcs adjustements gschema file on startup with build in defaults while execution -D, --debug-level=DN Set Gxsm debug level. 0: no debug output on console, 1: normal, 2: more verbose, ...5 increased verbosity -P, --pi-debug-level=PDN Set Gxsm Plug-In debug level. 0: no debug output on console, 1: normal, 2: more verbose, ...5 increased verbosity -s, --new-instance Start a new instance of gxsm3 -- not yet functional, use different user account via ssh -X... for now. --display=DISPLAY X display to use ::: center ::: {#tab:command-line} Parameter Description -h, --Hardware-Card= type set up type of hardware no do not use any hardware, analysis/simulation mode ... depends on available HwIs -u, --User-Unit= unit XYZ unit AA \u00c5, $1e-10$ m nm nm, $1e-9$ m --disable-plugins Disables the loading of plugins on startup mainly for debugging. : Command line parameters for calling Gxsm ::: ::: Right after the options shown above you can list files for opening to the free channels. All known formats are autodetected. [pi:WSxMio] {reference-type=\"ref\" reference=\"pi:WSxMio\"} [pi:nanoimport] {reference-type=\"ref\" reference=\"pi:nanoimport\"} [pi:OmicronIO] {reference-type=\"ref\" reference=\"pi:OmicronIO\"} [pi:primitiveimexport] {reference-type=\"ref\" reference=\"pi:primitiveimexport\"} [pi:sdfimport] {reference-type=\"ref\" reference=\"pi:sdfimport\"} [pi:UK2kimport] {reference-type=\"ref\" reference=\"pi:UK2kimport\"} [pi:gmeyerimexport] {reference-type=\"ref\" reference=\"pi:gmeyerimexport\"} [pi:spa4imexport] {reference-type=\"ref\" reference=\"pi:spa4imexport\"} [pi:GdatImExport] {reference-type=\"ref\" reference=\"pi:GdatImExport\"} [pi:PsiHDFimexport] {reference-type=\"ref\" reference=\"pi:PsiHDFimexport\"} [pi:pngImExport] {reference-type=\"ref\" reference=\"pi:pngImExport\"}","title":"Command line parameters {#sec:start:command-line-pars}"},{"location":"06b_Gxsm-3.0-Mainwindow/","text":"The Main Window {#ch:main} After startup, the main window appears. The actual user interface provided by the main window depends on the configuration (compare Fig. [fig:screenshot:gxsm3-main] {reference-type=\"ref\" reference=\"fig:screenshot:gxsm3-main\"}. GXSM can be configured for use with SPM techniques, which is the default. The main window provides two different functions: Firstly, it has a menu bar with pull-down menus. These menus provide the user with the usual File and Help menus which can be found in practically every mouse-driven software piece. Some of these pull-down menus interact with ( Math ) or start-up ( Windows ) other windows. Secondly, the main menu contains a large number of control fields which can be used, e.g., to control an instrument, or just display certain parameters. These control fields are described in the following two sections. Understanding the main window's entries: SPM mode {#sec:main:spmentries} This section explains the contents of the main window (see Fig. [fig:screenshot:gxsm3-main] {reference-type=\"ref\" reference=\"fig:screenshot:gxsm3-main\"}) for Gxsm running in SPM mode. The main window contains from top to bottom the menubar, a taskbar, the scan parameter, view mode, file, and info/comment sections, and a status and progress bar. The scan parameter and info sections of the main window are used both for entering parameters during data taking and displaying them after loading data. Scan parameters Each scan or image is characterized by its size and resolution. The size, or Range XY , gives the scale of the image like the scale of a city map and denotes the height and width of the scanned area. The resolution is determined by either the distance between the single scan points/pixels given by Steps XY or the number of points in X and Y direction given by Points XY . Given two of these parameters, the third one can be computed. The check box Calculate determines, which of them is calculated by GXSM. For instance, if Steps is checked, a change of Range XY results automagically in a new value for Steps XY . The parameter Offset XY determines the distance of the zeropoint of the image coordinates from the center of the physical scanrange. The actual location of the zeropoint within the scan depends on the source of the data. If the data was acquired using GXSM, the zeropoint is the middle of the topmost line. Using Rotation , the imaged area can be rotated. Both inputs using numeric values and the scrollbar are possible. GXSM can be used to do spatially resolved spectroscopy (\"probing\") and time dependent measurements (\"movies\"). Channels containing probing (or time dependent) data are essentially three-dimensional (3D) datasets. In these 3D datasets the X and Y coordinates correspond to the 2D position like in conventional SPM images. The third dimension can be the voltage V or the time t. GXSM displays only one slice corresponding to one V or one t value at a time. Layers denotes the number of points in the V direction, Time in the temporal direction. VRange Z and VOffset Z are used for the visualization of the scan data. They do not influence the data itself. See also Sec. [bright-contrast] {reference-type=\"ref\" reference=\"bright-contrast\"}. File and user information For the users convenience, the filenames for saving new data are automatically generated. The filename is set together using the Basename is the login name of the GXSM user. The scheme used for generating the filename from the scan number can be configured in the Preferences on the tab User . The scan number is followed by \"-M-\" if the image contains additional information besides the bare 2D image like events and point probes. The next part of the file name indicates the scan direction: Xp or Xm. Finally, the channel name is attached to the file name. The channel name can be configured on the tab DataAq of the Preferences window. Auto Save is checked, each new scan is automatically saved after the scan is finished. During image analysis it is often convenient to save the \"enhanced\" images using an easy to memorize name. Nethertheless, it is often necessary to get back to the original data. For this purpose, Originalname shows the name of the original data file. This feature works only for files saved using GXSM's NetCDF format. The Comment field allows adding comments to scan data, e.g. the name of the sample. Again, saving this information is supported best for the NetCDF file format. Hint: If your dataformat is not natively supported by GXSM, but can be exported to ASCII, consider using ncdump and ncgen to create a nc-file from your data. Running ncdump on any GXSM-nc-file shows you which parameters are necessary, insert your data in the ASCII output and revert the ASCII-file back to NetCDF using ncgen. Drag and Drop {#sec:main:DnD} Gxsm accepts all loadable files via 'drag and drop', e.g. from the Nautilus and understands VFS file paths. Even dragging URL's pointing to loadable files on the web is possible. If you drop a file on a channel-window, it is loaded into that channel. To create a new window with a new channel bound to it, drop the file above the main window. Keyboard-Accelerators {#sec:main:accel} Most common used action on a scan-view are assigned to keyboard accelerators, this is indicated by the Key-Symbol on the right side of a menu entry. (See pull down/pop-up menus on scan 2D view). F2 for example triggers a auto-display (auto scale to min-max of all data or via active rectangle area selection).","title":"Mainwindow"},{"location":"06b_Gxsm-3.0-Mainwindow/#the-main-window-chmain","text":"After startup, the main window appears. The actual user interface provided by the main window depends on the configuration (compare Fig. [fig:screenshot:gxsm3-main] {reference-type=\"ref\" reference=\"fig:screenshot:gxsm3-main\"}. GXSM can be configured for use with SPM techniques, which is the default. The main window provides two different functions: Firstly, it has a menu bar with pull-down menus. These menus provide the user with the usual File and Help menus which can be found in practically every mouse-driven software piece. Some of these pull-down menus interact with ( Math ) or start-up ( Windows ) other windows. Secondly, the main menu contains a large number of control fields which can be used, e.g., to control an instrument, or just display certain parameters. These control fields are described in the following two sections.","title":"The Main Window {#ch:main}"},{"location":"06b_Gxsm-3.0-Mainwindow/#understanding-the-main-windows-entries-spm-mode-secmainspmentries","text":"This section explains the contents of the main window (see Fig. [fig:screenshot:gxsm3-main] {reference-type=\"ref\" reference=\"fig:screenshot:gxsm3-main\"}) for Gxsm running in SPM mode. The main window contains from top to bottom the menubar, a taskbar, the scan parameter, view mode, file, and info/comment sections, and a status and progress bar. The scan parameter and info sections of the main window are used both for entering parameters during data taking and displaying them after loading data.","title":"Understanding the main window's entries: SPM mode {#sec:main:spmentries}"},{"location":"06b_Gxsm-3.0-Mainwindow/#scan-parameters","text":"Each scan or image is characterized by its size and resolution. The size, or Range XY , gives the scale of the image like the scale of a city map and denotes the height and width of the scanned area. The resolution is determined by either the distance between the single scan points/pixels given by Steps XY or the number of points in X and Y direction given by Points XY . Given two of these parameters, the third one can be computed. The check box Calculate determines, which of them is calculated by GXSM. For instance, if Steps is checked, a change of Range XY results automagically in a new value for Steps XY . The parameter Offset XY determines the distance of the zeropoint of the image coordinates from the center of the physical scanrange. The actual location of the zeropoint within the scan depends on the source of the data. If the data was acquired using GXSM, the zeropoint is the middle of the topmost line. Using Rotation , the imaged area can be rotated. Both inputs using numeric values and the scrollbar are possible. GXSM can be used to do spatially resolved spectroscopy (\"probing\") and time dependent measurements (\"movies\"). Channels containing probing (or time dependent) data are essentially three-dimensional (3D) datasets. In these 3D datasets the X and Y coordinates correspond to the 2D position like in conventional SPM images. The third dimension can be the voltage V or the time t. GXSM displays only one slice corresponding to one V or one t value at a time. Layers denotes the number of points in the V direction, Time in the temporal direction. VRange Z and VOffset Z are used for the visualization of the scan data. They do not influence the data itself. See also Sec. [bright-contrast] {reference-type=\"ref\" reference=\"bright-contrast\"}.","title":"Scan parameters"},{"location":"06b_Gxsm-3.0-Mainwindow/#file-and-user-information","text":"For the users convenience, the filenames for saving new data are automatically generated. The filename is set together using the Basename is the login name of the GXSM user. The scheme used for generating the filename from the scan number can be configured in the Preferences on the tab User . The scan number is followed by \"-M-\" if the image contains additional information besides the bare 2D image like events and point probes. The next part of the file name indicates the scan direction: Xp or Xm. Finally, the channel name is attached to the file name. The channel name can be configured on the tab DataAq of the Preferences window. Auto Save is checked, each new scan is automatically saved after the scan is finished. During image analysis it is often convenient to save the \"enhanced\" images using an easy to memorize name. Nethertheless, it is often necessary to get back to the original data. For this purpose, Originalname shows the name of the original data file. This feature works only for files saved using GXSM's NetCDF format. The Comment field allows adding comments to scan data, e.g. the name of the sample. Again, saving this information is supported best for the NetCDF file format. Hint: If your dataformat is not natively supported by GXSM, but can be exported to ASCII, consider using ncdump and ncgen to create a nc-file from your data. Running ncdump on any GXSM-nc-file shows you which parameters are necessary, insert your data in the ASCII output and revert the ASCII-file back to NetCDF using ncgen.","title":"File and user information"},{"location":"06b_Gxsm-3.0-Mainwindow/#drag-and-drop-secmaindnd","text":"Gxsm accepts all loadable files via 'drag and drop', e.g. from the Nautilus and understands VFS file paths. Even dragging URL's pointing to loadable files on the web is possible. If you drop a file on a channel-window, it is loaded into that channel. To create a new window with a new channel bound to it, drop the file above the main window.","title":"Drag and Drop {#sec:main:DnD}"},{"location":"06b_Gxsm-3.0-Mainwindow/#keyboard-accelerators-secmainaccel","text":"Most common used action on a scan-view are assigned to keyboard accelerators, this is indicated by the Key-Symbol on the right side of a menu entry. (See pull down/pop-up menus on scan 2D view). F2 for example triggers a auto-display (auto scale to min-max of all data or via active rectangle area selection).","title":"Keyboard-Accelerators {#sec:main:accel}"},{"location":"06c_Gxsm-3.0-Channels/","text":"Channels {#ch:channels} One of the most important features of Gxsm is the multichannel-capability. Multichannel-capability describes the simultaneous data acquisition and display from different sources. You may e.g. at the same time measure topography and friction-forces with the AFM. Additionally to the simultaneous acquisition of different signals, the multi-channel feature of GXSM can be used to load multiple images and, e.g. compare them, or apply more complex operations to them. Furthermore, it serves as a history mechanism during image manipulation, because the result of any mathematical operation on one channel does not overwrite it but is stored in a new channel. The Channel Dialog {#sec:channels:dialog} The channel dialog pops up selecting Ch. Sel. in the Windows menu of the main window. You can use it, to select the displaymode ( View ) and the source for data acquisition ( Mode ) for any channel. One of the following modes can be chosen, see [Gxsm-Visualisation] {reference-type=\"ref\" reference=\"Gxsm-Visualisation\"} for details: No : During data acquisition no data is displayed -- background storage/saving only. You can switch view mode any time. Grey 2D : The data are displayed as a grayscaled/false-color image. Surface 3D : Three/multi dimensional data/scan viewer. OpenGL (4.0 minimum) based. Can display volume data and slices of multilayered data. Profile 1D: Profile view of the current or all lines. Usually you will use the mode Grey 2D for data acquisition. If you want to see the line profiles of the actual scan line, right-click on the window of the channel, select view and activate red Profile. For processing of data several modes are available: Off or On . Off deletes the channel. Active . The most important mode, it sets the active channel. All image manipulation is done using this channel. Only one channel can be Active at a time. Math Channel , which stores the result of the last operation is automatically called Math . X Needed for several math/image-manipulation, that need more than one source. If you want to activate a channel for data acquisition, please select in the second column the channel name, i.e. Topo or ADC0_ITunnel . This channel will be used as a target for a scan. The toggle $->$ and $<-$ in the third column defines the scanning direction at which data are collected. Thus Topo+ means measurement of your topography during movement of your scanhead in +X direction. By choosing $2>$ or $<2$ an experimental mode is activated in which each scanline is scanned twice, i.e. this mode is used for magnetic force measurements. Hint: Using the MK3-A810 DSP with flexible signal configuration 4 special modes can be configured to acquire any available signal. See DSP-Control. Hint: The names of the input channels can be customized (see [ch:config] {reference-type=\"ref\" reference=\"ch:config\"}).","title":"Channels"},{"location":"06c_Gxsm-3.0-Channels/#channels-chchannels","text":"One of the most important features of Gxsm is the multichannel-capability. Multichannel-capability describes the simultaneous data acquisition and display from different sources. You may e.g. at the same time measure topography and friction-forces with the AFM. Additionally to the simultaneous acquisition of different signals, the multi-channel feature of GXSM can be used to load multiple images and, e.g. compare them, or apply more complex operations to them. Furthermore, it serves as a history mechanism during image manipulation, because the result of any mathematical operation on one channel does not overwrite it but is stored in a new channel.","title":"Channels {#ch:channels}"},{"location":"06c_Gxsm-3.0-Channels/#the-channel-dialog-secchannelsdialog","text":"The channel dialog pops up selecting Ch. Sel. in the Windows menu of the main window. You can use it, to select the displaymode ( View ) and the source for data acquisition ( Mode ) for any channel. One of the following modes can be chosen, see [Gxsm-Visualisation] {reference-type=\"ref\" reference=\"Gxsm-Visualisation\"} for details: No : During data acquisition no data is displayed -- background storage/saving only. You can switch view mode any time. Grey 2D : The data are displayed as a grayscaled/false-color image. Surface 3D : Three/multi dimensional data/scan viewer. OpenGL (4.0 minimum) based. Can display volume data and slices of multilayered data. Profile 1D: Profile view of the current or all lines. Usually you will use the mode Grey 2D for data acquisition. If you want to see the line profiles of the actual scan line, right-click on the window of the channel, select view and activate red Profile. For processing of data several modes are available: Off or On . Off deletes the channel. Active . The most important mode, it sets the active channel. All image manipulation is done using this channel. Only one channel can be Active at a time. Math Channel , which stores the result of the last operation is automatically called Math . X Needed for several math/image-manipulation, that need more than one source. If you want to activate a channel for data acquisition, please select in the second column the channel name, i.e. Topo or ADC0_ITunnel . This channel will be used as a target for a scan. The toggle $->$ and $<-$ in the third column defines the scanning direction at which data are collected. Thus Topo+ means measurement of your topography during movement of your scanhead in +X direction. By choosing $2>$ or $<2$ an experimental mode is activated in which each scanline is scanned twice, i.e. this mode is used for magnetic force measurements. Hint: Using the MK3-A810 DSP with flexible signal configuration 4 special modes can be configured to acquire any available signal. See DSP-Control. Hint: The names of the input channels can be customized (see [ch:config] {reference-type=\"ref\" reference=\"ch:config\"}).","title":"The Channel Dialog {#sec:channels:dialog}"},{"location":"07_Gxsm-3.0-Visual/","text":"Visualization {#ch:visual} As a multi purpose 2D/3D data visualization, acquisition and manipulation system GXSM provides a set of powerful graphical presentation modes. Available are 2D grey/false color, profile and 3D representations. The internal objective structure of GXSM allows to switch in between all available \"View-Modes\" on the fly and at all times, even while scanning. In addition, on the fly data to color space mappings are provided for viewing data. Data display modes {#Gxsm-VModes} Due to a possibly huge Z-value range and often small local signal variation special data transformations (e.g. for mapping to color space) are needed to visualize these features. Therefore from Quick , Direct , PlaneSub , Logarith ., Horizontal Diff and Periodic view modes can be selected via GXSM main window in \"View\" or via the pop-up window of the data window itself. The raw data which are saved for example in the nc-files are not affected by a change of the data diplay mode. Quick : for each line a line regression is estimated from a subset of points (for speed) and data is slope and offset corrected for visualization. Direct : data is displayed 'as is'. Only a linear transformation for shifting and scaling data into view range is performed using the view range \"VRange Z\" and view offset \"VOffset Z\" controls located context menue of the scan window. Direct HiLit : Same as Direct but marks the lowest and highest values. Plane : data is displayed after background correction by a bi-linear/offset function (plane-correction) defined by three Point-Objects. The resulting Z values are linear transformed to shifting and scale data into view range as it is defined by the view range \"VRange Z\" and view offset \"VOffset Z\" controls located in the context menue of the scan window or automatically calculated to fit a selected rectangular area. Horizontal : shifts the lines, so that their average is zero. Periodic : works like Direct , but the available colors are used periodically repeating (mapping: linear Z transform as in Direct modulo number of colors). GXSMNoteThe periodic mode is only via. pop up menu accessible. Logarithmic : a logarithmic scaling can be applied to data. It used for very high dynamic data such as diffraction data (e.g. SPA--LEED or XRD) where background variation should be visible, while high intensity peaks are not out of display range. The translation happens in the following way: $$Grey/Colornumber \\propto \\log \\left( 1 + \\left| Data - Min \\right| \\times Contrast + Bright \\right) \\mbox{,}$$ with $Min$ being the smallest value (omits negative values), Contrast and Bright are calculated from VRange Z and VOffset Z to fit data into desired Z Range window. Differential : displays a averaged and weightened X-derivative, similar to the Koehler filter [PlugIn-F1D-Koehler] {reference-type=\"ref\" reference=\"PlugIn-F1D-Koehler\"}, but using a smaller averagening range (16 pixels). To change the view mode just select a GXSMRadiomain windowQuick / Direct / Plane /Logarith. / Diff.. These data display modes are applyed to all visualization modes, see [Gxsm-Visualisation] {reference-type=\"ref\" reference=\"Gxsm-Visualisation\"}. Scaling and shifting data view range {#display-dialog} View Range Z and View Offset Z {#bright-contrast} The parameters VRange Z and VOffset Z found in Gxsm main window are controlling the always applied linear transformation of the data to grey or false color mapping. GXSMEntryVRange Z sets the data Z-Range which should be mapped to full color space. GXSMEntryVOffset Z sets the offset relative to averaged data range. E.g. if you data represents a stepped surface (terraces assumed to be horizontal aligned) and you set the GXSMEntryVRange Z to approx the step height you will get only one terrace in view range, others are pinned at max/min color, using the VOffset you can select a terrace to be viewed with high contrast. Usually using the GXSMToolbarAutodisp button will do the job automatically for the whole scan or if a rectangle object 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"} is selected the selected area will be scaled automatically to full color space available. GXSMEntryVOffset Z is always set to zero by GXSMToolbarAutodisp. GXSMHintIf your scan has some distorsions/spikes messing up the automatic min-max range, try enabling the GXSMMenuView/Tolerant Auto Display-option. This will compute the view-range via an automatic histogram analysis in a progressive way. In SPA--LEED mode: CPS High -- Low {#CPShi-lo} In SPA--LEED mode the scaling of CPS-High/Low can be set. Using a palette: false color mapping Custom and GXSM provided palette {#color-custom} The color palette is simply a one dimensional PNM-bitmap file, that can be selected through an entry in the preferences dialog, call GXSMMenuSettings/Preferences, and is located there GXSMPrefUserUser/Palette. Activate GXSMMenuView/Palette to make use of the selected palette and refresh the view via the GXSM GXSMToolbarAutodisp. GXSM will make use of up to 8192 palette entries automatically. Here a short description of the PNM file format: P3 # CREATOR: The GIMP's PNM Filter Version 1.0 1024 1 255 R G B R G B ... The file is expected to have at least 1024 RGB-entries (R, G, B values in the range 0 ...255) just following the header, but no more than 8192 are accepted. Use gimp to generate this conveniently. [^1] GXSM can (re)load a new palette at any time. Choose a new one as described above and refresh via the GXSM GXSMToolbarAutoDisp. Additional custom palette files can be loaded from any location, put the full path to it into GXSMPrefPathsPaths/UserPalette and press OK, then you will find it in the list of available palette files in GXSMMenuView/Palette on next call of the preferences. Additional Information In particular during data acquisition it is convinient to have a 2D representation of the data and a line graph of the last scan line(s). You can get this by activating GXSMMenuView/Red profile. You can also active the display of additional meta-data of the image by GXSMMenuView/Side Pan. That will show you on the different tabs the paramaters/varialbes of the nc-file, Probe Events, User Events, and a list of the Objects.[^2]. Visualization modes []{#Gxsm-Visualisation label=\"Gxsm-Visualisation\"} The visualization mode can be switched at all times, see [sec:channels:dialog] {reference-type=\"ref\" reference=\"sec:channels:dialog\"} for details. The default mode is always Grey 2D . View \"No\" This is not really a visualization mode, it just prevents any display and saves memory and CPU power if a data channel is just to be acquired in background in a blind manner. View \"Grey 2D\" The default mode for viewing 2D data. It allows using a simple grey scale data representation or using of any available false color palette. By default the image size is scaled to achieve a good fit on your screen. But any zoom (magnifying by number) or quench (down-size by 1/number) is possible. Window title information In the window title of the channel view shows for example: GXSMScreenShotScan2DVObjectsGrey 2D view with commonly used objects and other gizmos OSD scan info of selected parameters is enabled here (red text). The currently active object (colored nodes) is the Rectangle object. Also enabled at time of this pdf data view export is the legend (scale bar and Z legend, below option). GXSMTTCh2 : channel number is 2. GXSMTTX+ Topo,* : this channel is in data acquiring mode, else here appears the path/filename GXSMTTQ1/5 : the data view is currently down-sized by factor of 5. GXSMTTShort[2] : the current data is of type short (2 bytes). Popup Menu {#Gxsm-TwoD-Popup} Tthe GXSMPopupimage by clicking GXSMMouse3the image activates several convenient options and displaying tools: Activate : set the current window (channel) to active state (used for math, etc.). Autodisp : activates this window and performs an automatic scaling. Mode : switch the channel mode, see [sec:channels:dialog] {reference-type=\"ref\" reference=\"sec:channels:dialog\"}. File : load/save scan data in this channel,\\ load/save objects ( 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"}),\\ Get Info (about this scan, it has to be (re)loaded before, if it was currently acquired),\\ bring up a print dialog for this image,\\ close channel (removes this data from memory and closes the window).\\ The current view including all objects, legned(s), etc. can be exported as png bitmap and also as vector graphics as pdf - -this allows for example to use inkscape to edit the meta data and objects or simply remove them. Edit : Copy, Crop (a marked rectangle, creates a new scan), Zoom In/Out (use a rectangle object to select area to zoom in or zoom out to, it resizes data into a new scan). View : change view mode, see 1.1 {reference-type=\"ref\" reference=\"Gxsm-VModes\"}. Objects : set type of object to create, see 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"}. Remove all removes all objects. Events : controls what kind of Events are displayed. Objects {#Gxsm-VObjects} Only in the Grey 2D mode are coordinate measurements and selections available. Basic objects are Point, Line, Rectangle, PolyLine, Circle, Ksys (Coordinate System used for atom grid overlays/measuring and also new basic PAH molecule models can be selected) and Parabel. Some are available with the prefix \"Show\" in the menu, which means the data along a path, such as line, circle and in a case of a point the (possibly) available 3rd layered dimension in depth of scan, is shown using the profile view ( [Gxsm-Profile] {reference-type=\"ref\" reference=\"Gxsm-Profile\"}). Select between the different types of objects by the GXSMPopupObjects. You add an object by left-clicking into the 2D image. You can remove an object by clicking with the middle mouse button on it. [^3] You can remove all visible objects by GXSMPopupObjects/Remove all. By left-clicking on the object handlers you can modify them. In the case that the handlers are two small you can change their size in the menue GXSMMenuSettings/Prefereces. Look for the settings GXSMPrefGUIHandleLineWidth, GXSMPrefGUIHandleSize and GXSMPrefGUIObjectLineWidth. For getting the coordinates and Z-value of the mouse position, just hit the middle mouse button to get a cross hair pointer and move around to measure. You can switch the shown units from default unit to pixels using the toggle switch GXSMPopupGrey 2D viewView/Pixels. While moving objects, the objects properties coordinates (angle, length, ...) are shown in the status line of the window. This is useful for measurements, etc.. More precise measurements are possible using the Show Line object, which is updated on the fly while moving the line interactively across the image. Objects are also used to provide some math actions with coordinates. All object coordinates can be viewed and changed using the object popup menu (middle mouse button on object). The objects save/load (File menu of view popup) allows saving objects and reloading those later to any scan at absolute coordinates (including offset). While scanning is in progress the current scan-line can be viewed as profile, use GXSMPopupGrey 2D viewView/red Profile to toggle it on and off[^4]. Scan Events []{#Gxsm-Events label=\"Gxsm-Events\"} Scan Events, available since GXSM-2.0 V1.6.0, can be any kind of Event or Experiment related to the current tip position and time. Per definition a GXSM \"Scan Event\" holds a position and possible more specific information like what happened. I.e a simple bias change (User-Event-Entry) or a full set of probe data (Prove-Event-Entry). The number of Events per scan is unlimited. And Events are always getting attached to the current active scan. The Scan Pop-up menu Events allows to show Probe Events or User Events. Because there can be many thousands of Probe Events using the automatic rastered probing, the displayed markers can be limited in number and distance from a certain point, indicated by middle-mouse clicking. Probe events are sourced by the SRanger Vector Probing (spectroscopy, manipulation, etc.), single and automatic (rastered). Enabling the displaying of Probe Events will add some controls to the scan window for selecting the range and number of Events to be displayed. Also the setup for data plotting shows up. -- to be completed -- Tips Define you personal hot-keys with the pop-up, just select an pop-up entry and press a key! E.g: Set GXSMKey=,GXSMKey- for GXSMPopupGrey 2D viewView/zoom in,out! View \"Surface 3D\" []{#view:surface label=\"view:surface\"} A 3D model of the data, using the Z-value as height, can be viewed using the GL/Mesa renderer. Hardware acceleration is used by the GL subsystem if the X-server provides it. This works even while scanning, but consumes a lot of CPU power and slows the scanning process down. Pop-up Menu The GXSMPopup3D view is activated by clicking GXSMMouse3the image. It includes some of the options already known from the Grey 2D popup menu, see 1.2.2.2 {reference-type=\"ref\" reference=\"Gxsm-TwoD-Popup\"}. The popup offers some options for controlling the 3D view: GXSMTTGL Options : Quick access to the display options\\ Zero Plane (enable/disable showing of the \"bottom box\"),\\ Mesh (use meshing instead of solid rendering),\\ GXSMTTScene Setup : Open the control panel for 3D Scene Setup, refer to next section. Using the mouse for rotation and translation is possible, but a bit unusual. First, set the window size not too huge and the rendering resolution (see Scene Setup) above 1 to speed up things. Then press the left mouse button and move the mouse carefully around for rotation. Use the middle button for translation. If you find this impractical, use the scene setup to set rotation and translation! Scene Setup GXSMNotefew preliminary notes on 3D view setup This dialog allows a sophisticated 3D rendering configuration. Mouse/wheel motions: rot, distance, translation. See \\\"Help\\\" buttons! View : Setting of the model (surface) orientation and view. The coordinate system and view controls: scan xyz dimensions are mapped into a 1x1x1 cube (with y may have a aspect if non square) in GL coordinates (GL-XZ is Gxsm-surface plane), Z-scale (absolute, 1=max-value-1x1x1 cube dim or relative angstroem, 1 will scale Z the same as X.) RotationX/YZ : Setting of the model (surface) orientation in world space. RotationPreset : Select \\\"Top-View\\\", then elevation is above, and distance \\\"in front of center\\\"\\... if you rotate object/surface, it changes accordingly. And more default views as named. The \\\"Manual\\\" view will leave XYZ rotation settings untouched vs. pre sets which will reset the rotations to the selected view at any update. LookAt : Predefines look at positions. Translation : model translation in world space. FoV : Field of View. Distance : Distance from model center in \\\"Top-View\\\". Elevation : Elevation above model center in \\\"Top-View\\\". HeightScaleMode : Height scaling mode. Relative range: 1 equals full data range fits 1x1x1 cube. Absolute Range: only meaningful for XYZ data with same units. 1 equals Z scale matching X scale to fit 1x1x1 cube. GXSMNotefix typo in GUI Tskl : N/A SliceOffset : Z-Offset of slicing selection in volume mode. VertexSource : Flat: no displacement, Direct Height: data is used directly as displacement source, ViewMode Height: view mode transformed data is used. You must select the view more before entering the 3D View as data is loaded to the GPU only once. Note: Toggle 3D view back to 2D to update. y: experiments (N/A), Channel-X: Channel X data is used if available. X/Y/Z-slice: slicing views for volume data with value dimension. Switch to Volume Shader (ShadeModel=Volume) in Surface Material Tab. Volume: render 3D data as volume, also use Volume Shader. Scatter: experimental / cube projection, N/A. SliceLimiter : : Volume view define the detail and range for view aligned projection planes to be generated. A default cube data set will fit into a 0 .. 1000 range, typically 50..100 slices are sufficient, but you can opt for more detail. Computation intense. Example: $[start = 0, end =1000, step = 10, 0]$ To project beyond you can extend the ranges to for example $[-500, 1500, 10, 0]$ -- may be necessary to cover odd aspect ratio data. Also you can intentionally use it to \\\"cut-open\\\" a volume and only rend par of it - i.e. $[500, 1000, 10, 0]$! SlicePlanes : not used at this time. Light : Light sources are ambient and a single \\\"sun\\\" defined by a light direction vector. TipView: enable/disable rendering of a virtual \\\"tip\\\". Surface Material : Color mapping/shading: data is always automatically mapped into a 0..1 full scale range equivalent. Gxsm palette is mapped to 0..1 full range. Controls are offset and scale. Advanced multi dim data handling (you need a value-dimension with data) if data is in \\\"time\\\" you can run the transformation plugin \\\"multi-dim transpose\\\" to swap time to value. Slicing and volume view, and the use of transparency settings. Additional transparency for blending. The transfer function for (1-alpha) blending is transparenceoffset+transparencyscale\\*value. Using Palette color as above. Annotations : Title, Labels, etc. Render Opt. : Ortho : Orthographic projection is used when set to true. TessLevel : Use the render option \\\"TessLevel\\\" to control the tesselation level, i.e. the detail of rendering. A default triangulated flat base plane spawning a 128x128 grid is used and is subdivided on GPU level up to $64\\times$ controlled by the tesselation factor. On GPU level the selected data as used for height field displacements any any resulting given resolution given by the tesselation factor. Only if that happens not to be sufficient you should increase the \\\"BasePlaneGrid\\\" size, but there is usually no need to do so as $128 \\times 64$ is bigger than most data sets pixel resolution. Not recommended for performance reasons. You may even want to reduce this for less powerful GL hardware. For this change (BasePlaneGrid only) to take effect you have to click apply and close/reopen the 3D view to rebuild the new geometry. BasePlaneGrid : See TessLevel. ProbeAtoms : Number \\\"atoms\\\" created for tip visualization. Mesh : false: regular 3D rendering. true: use a mesh. ShadingMode : Debug Shader only. Debugging and special shading mode/experimental and customizable for GL experts to play with. You can hack even the tess-fragment.glsl shader for custom fun! ClearColor : Select the scene backgound color. Fog\\... : Fog settings -- debug shader only, use debug shader, and debug mode \\\"5\\\" to apply fog. Cull : Culling means back side triangles of the surface (hidden in top view) are never drawn, mean if you look from below, it's like an roof with no shingles.. faster and normally better. Just disabled in volume/slicing mode obviously.. The general purpose \"Profile 1D\" view []{#Gxsm-Profile label=\"Gxsm-Profile\"} For several purposes Gxsm can show data using the a general purpose Profile -View representation (XY-plot). GXSMScreenShotShowLineProfile as used by the Show-Line object (old version gxsm2). GXSMScreenShotanalysis-2d-profile-measuring-1dGxsm3 Profile View of data section with cursors A,B eneabled for measuring. In the view-mode Profile 1D it shows the currently measured line or the first or via popup menu ( Data Select /...) selected line of the data set. The All option loads all profiles at once, be careful using this with huge scan (lots of memory needed). The scaling is (with respect to shown tickmarks) only correct for all profiles, if the option Y Scaling/hold or Y Scaling/expand only is activated[^5]. Pop-up Menu The popup menu of the Profile View offer the folowing options: File : File operations: Open, Save : File handling. Print : Printing via script. See subsection Profile Printing. Activate : If used as \"channel view\", to activate this scan. Options : This menu provides toggle buttons for the following display options:\\ Y lineregression : Enable to use a \"on-the-fly\" line regression. Symbols : GXSMNA Legend : GXSMNA Tickmarks : Enable display of tickmarks no Gridlines : Disable gridlines Y Scaling : Several Y scaling options[^6]: Y logarithmic : Set Y axis to logarithmic scale. Y hold : Hold Y scale (prevents automatic rescaling). Y expand only : Expand Y scale only. Y auto : Force auto scale. ... : A set of manual Y offset shift (move upper/lower bound) and Y zooming (in/out) options. GXSMHintFor quicker adjusting pull of the menu (drag the menu apart by clicking the dashed line) and place it beside! X Scaling : GXSMNA Cursor : This menu allows to enable up to two cross hair cursers (blue and green). Use the left mouse button to dragg the cursors around, click on the vertical cursor line to grab it! The status line will show (one cursor) the coordinates or (two cursors) the differential coordinates for measurements.\\ The Cursor menu (tear it off!) allows to auto position the cursor on local minima or maxima to the left or right of the current position. Or just to skip to the next/previous data point. Data Select : Select/walk through a set of multiple data lines or show all.\\ GXSMNoteOnce selected all, you can't undo this yet, reopen the \"Profile View\" therefore. 1D data file format Via the File menu the profie data can be saved in Ascii format. The file is preceeded by a simple header using commentary lines and a keyword. The data itself follows using the following format: Height Profile Data: # ASC LineProfile Data # Date: Tue Jun 18 17:21:42 2002 # FileName: /tmp/HutProfile.asc # Len = 405.843A # tStart= 1016686983s # tEnd = 1016687662s # phi = 39.9441\\B0 # dX = 0.235244A # dY = -0.197002A # dZ = 0.0139465A # Xo = -1079.55A # Yo = 0A # Anz = 1323 # NSets = 1 # Xunit = A # Xalias= AA # Xlabel= L # Yunit = A # Yalias= AA # Ylabel= Z # Title = title not set # Format= X[index*LineLen/Nx] Z[DA]... InUnit: X[Xunit] Z[Zunit]... 0 -103 InUnits: 0 -1.43649 0.30676 -105 InUnits: 0.306992 -1.46439 0.613519 -107 InUnits: 0.613983 -1.49228 0.920279 -107 InUnits: 0.920975 -1.49228 1.22704 -106 InUnits: 1.22797 -1.47833 1.5338 -104 InUnits: 1.53496 -1.45044 ... STS Data: # ASC LineProfile Data # Date: Tue Jun 18 17:24:59 2002 # FileName: /tmp/STS.asc # Len = 0A # tStart= 1024442686s # tEnd = 1024442686s # phi = 0\\B0 # dX = 0A # dY = 0A # dZ = 1A # Xo = 0A # Yo = 0A # Anz = 500 # NSets = 2 # Xunit = V # Xalias= V # Xlabel= Bias # Yunit = nA # Yalias= nA # Ylabel= I # Title = STS [local Spectroscopy] # Format= X[index*LineLen/Nx] Z[DA]... InUnit: X[Xunit] Z[Zunit]... 0 0 0 InUnits: -2 0 0 0.02 0 0 InUnits: -1.99198 0 0 0.04 0 0 InUnits: -1.98397 0 0 0.06 0 0 InUnits: -1.97595 0 0 0.08 0 0 InUnits: -1.96794 0 0 ... Simple Shell Script for extracting just X and Y data: #!/bin/bash for file do awk '{ if ($1 != \"#\") { print $5, $6}}' $file > $file.dat1 done Gxsm can reload this type of files using just the Open command. The file should have the extension to be recognized as a profile data set. Profile Printing Starting from the File menu you will find the Print -entry. From here you have access to six user commands. This commands are simple shell scripts that receive a temporarily created version of the 1D profile as argument and can do various things with this profile (not only print). There are six example scripts in the profileplot subdirectory. The first script runs gri to process your profile and will create a postscript file of your print. The second script runs gri to process your profile and will create a postscript file of your print. The data are modified with an embedded Python script to calculate STS. The third script runs gri to process your profile and will create a postscript file of your print. The y-axis is log'ed here. The fourth script runs gri to process your profile and will create a postscript file of your print. This is a copy of the first script. Use this to experiment. The fifth script runs xmgrace to show your profile. Remember that Gxsm will freeze while xmgrace is running, so don't use this option as long as a scan is running. The sixth script runs python -matplot to show your profile. You can export to many bitmap formats from this. Python-matplot is not (yet; check it out) part of debian testing (Feb 05)[^7]. These scripts can run standalone (i. e. without Gxsm running). Simply run them with an ASCII-1D-profile as argument like this: /path/gxsmplot1d-1.gri.sh myprofile.asc One can think of many different things these scripts are capable of. They can run any calculation on the profiles. These scripts are designed to run together with the Show Line option, not with the 1-D profile view in the channel selector. If you use the latter you will always receive a plot of line 0. You can run your own scripts by modifying the entries User/command[1..6] in the preferences. [^1]: 1. Palette Editor, 2. fill the picture with 1024x1 pixel, 3. save as MyPalette.pnm (ascii-type). [^2]: The list of objects is currently not autoupdating (Gxsm-2 1.40.0 'Sandy Experiment') [^3]: If your notebook or mouse has just two buttons click both at the same time. [^4]: Showing the profile while scanning can delay the scanning process on slower machines, so switch it off if not needed! To save CPU power you can disable auto-scaling and tick marks in the profile view. [^5]: There is a bug with refreshing the toggle indicators to the initial setting upon first menu activation, to make sure the setting is correct please toggle the option once! Gxsm saves the last setting of all these option. [^6]: in case no data is appearing, one of the following conditions may be present: negative values (using log.) or zero Y or X range. [^7]: Follow the instructions on the matplotlib-website for installing. It's easy. Simply add one line to /etc/apt/sources.list and run apt-get update && apt-get install python-matplotlib","title":"Visual"},{"location":"07_Gxsm-3.0-Visual/#visualization-chvisual","text":"As a multi purpose 2D/3D data visualization, acquisition and manipulation system GXSM provides a set of powerful graphical presentation modes. Available are 2D grey/false color, profile and 3D representations. The internal objective structure of GXSM allows to switch in between all available \"View-Modes\" on the fly and at all times, even while scanning. In addition, on the fly data to color space mappings are provided for viewing data.","title":"Visualization {#ch:visual}"},{"location":"07_Gxsm-3.0-Visual/#data-display-modes-gxsm-vmodes","text":"Due to a possibly huge Z-value range and often small local signal variation special data transformations (e.g. for mapping to color space) are needed to visualize these features. Therefore from Quick , Direct , PlaneSub , Logarith ., Horizontal Diff and Periodic view modes can be selected via GXSM main window in \"View\" or via the pop-up window of the data window itself. The raw data which are saved for example in the nc-files are not affected by a change of the data diplay mode. Quick : for each line a line regression is estimated from a subset of points (for speed) and data is slope and offset corrected for visualization. Direct : data is displayed 'as is'. Only a linear transformation for shifting and scaling data into view range is performed using the view range \"VRange Z\" and view offset \"VOffset Z\" controls located context menue of the scan window. Direct HiLit : Same as Direct but marks the lowest and highest values. Plane : data is displayed after background correction by a bi-linear/offset function (plane-correction) defined by three Point-Objects. The resulting Z values are linear transformed to shifting and scale data into view range as it is defined by the view range \"VRange Z\" and view offset \"VOffset Z\" controls located in the context menue of the scan window or automatically calculated to fit a selected rectangular area. Horizontal : shifts the lines, so that their average is zero. Periodic : works like Direct , but the available colors are used periodically repeating (mapping: linear Z transform as in Direct modulo number of colors). GXSMNoteThe periodic mode is only via. pop up menu accessible. Logarithmic : a logarithmic scaling can be applied to data. It used for very high dynamic data such as diffraction data (e.g. SPA--LEED or XRD) where background variation should be visible, while high intensity peaks are not out of display range. The translation happens in the following way: $$Grey/Colornumber \\propto \\log \\left( 1 + \\left| Data - Min \\right| \\times Contrast + Bright \\right) \\mbox{,}$$ with $Min$ being the smallest value (omits negative values), Contrast and Bright are calculated from VRange Z and VOffset Z to fit data into desired Z Range window. Differential : displays a averaged and weightened X-derivative, similar to the Koehler filter [PlugIn-F1D-Koehler] {reference-type=\"ref\" reference=\"PlugIn-F1D-Koehler\"}, but using a smaller averagening range (16 pixels). To change the view mode just select a GXSMRadiomain windowQuick / Direct / Plane /Logarith. / Diff.. These data display modes are applyed to all visualization modes, see [Gxsm-Visualisation] {reference-type=\"ref\" reference=\"Gxsm-Visualisation\"}.","title":"Data display modes {#Gxsm-VModes}"},{"location":"07_Gxsm-3.0-Visual/#scaling-and-shifting-data-view-range-display-dialog","text":"","title":"Scaling and shifting data view range {#display-dialog}"},{"location":"07_Gxsm-3.0-Visual/#view-range-z-and-view-offset-z-bright-contrast","text":"The parameters VRange Z and VOffset Z found in Gxsm main window are controlling the always applied linear transformation of the data to grey or false color mapping. GXSMEntryVRange Z sets the data Z-Range which should be mapped to full color space. GXSMEntryVOffset Z sets the offset relative to averaged data range. E.g. if you data represents a stepped surface (terraces assumed to be horizontal aligned) and you set the GXSMEntryVRange Z to approx the step height you will get only one terrace in view range, others are pinned at max/min color, using the VOffset you can select a terrace to be viewed with high contrast. Usually using the GXSMToolbarAutodisp button will do the job automatically for the whole scan or if a rectangle object 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"} is selected the selected area will be scaled automatically to full color space available. GXSMEntryVOffset Z is always set to zero by GXSMToolbarAutodisp. GXSMHintIf your scan has some distorsions/spikes messing up the automatic min-max range, try enabling the GXSMMenuView/Tolerant Auto Display-option. This will compute the view-range via an automatic histogram analysis in a progressive way.","title":"View Range Z and View Offset Z {#bright-contrast}"},{"location":"07_Gxsm-3.0-Visual/#in-spa-leed-mode-cps-high-low-cpshi-lo","text":"In SPA--LEED mode the scaling of CPS-High/Low can be set.","title":"In SPA--LEED mode: CPS High -- Low {#CPShi-lo}"},{"location":"07_Gxsm-3.0-Visual/#using-a-palette-false-color-mapping","text":"","title":"Using a palette: false color mapping"},{"location":"07_Gxsm-3.0-Visual/#custom-and-gxsm-provided-palette-color-custom","text":"The color palette is simply a one dimensional PNM-bitmap file, that can be selected through an entry in the preferences dialog, call GXSMMenuSettings/Preferences, and is located there GXSMPrefUserUser/Palette. Activate GXSMMenuView/Palette to make use of the selected palette and refresh the view via the GXSM GXSMToolbarAutodisp. GXSM will make use of up to 8192 palette entries automatically. Here a short description of the PNM file format: P3 # CREATOR: The GIMP's PNM Filter Version 1.0 1024 1 255 R G B R G B ... The file is expected to have at least 1024 RGB-entries (R, G, B values in the range 0 ...255) just following the header, but no more than 8192 are accepted. Use gimp to generate this conveniently. [^1] GXSM can (re)load a new palette at any time. Choose a new one as described above and refresh via the GXSM GXSMToolbarAutoDisp. Additional custom palette files can be loaded from any location, put the full path to it into GXSMPrefPathsPaths/UserPalette and press OK, then you will find it in the list of available palette files in GXSMMenuView/Palette on next call of the preferences.","title":"Custom and GXSM\u00a0provided palette {#color-custom}"},{"location":"07_Gxsm-3.0-Visual/#additional-information","text":"In particular during data acquisition it is convinient to have a 2D representation of the data and a line graph of the last scan line(s). You can get this by activating GXSMMenuView/Red profile. You can also active the display of additional meta-data of the image by GXSMMenuView/Side Pan. That will show you on the different tabs the paramaters/varialbes of the nc-file, Probe Events, User Events, and a list of the Objects.[^2].","title":"Additional Information"},{"location":"07_Gxsm-3.0-Visual/#visualization-modes","text":"[]{#Gxsm-Visualisation label=\"Gxsm-Visualisation\"} The visualization mode can be switched at all times, see [sec:channels:dialog] {reference-type=\"ref\" reference=\"sec:channels:dialog\"} for details. The default mode is always Grey 2D .","title":"Visualization modes"},{"location":"07_Gxsm-3.0-Visual/#view-no","text":"This is not really a visualization mode, it just prevents any display and saves memory and CPU power if a data channel is just to be acquired in background in a blind manner.","title":"View \"No\""},{"location":"07_Gxsm-3.0-Visual/#view-grey-2d","text":"The default mode for viewing 2D data. It allows using a simple grey scale data representation or using of any available false color palette. By default the image size is scaled to achieve a good fit on your screen. But any zoom (magnifying by number) or quench (down-size by 1/number) is possible.","title":"View \"Grey 2D\""},{"location":"07_Gxsm-3.0-Visual/#window-title-information","text":"In the window title of the channel view shows for example: GXSMScreenShotScan2DVObjectsGrey 2D view with commonly used objects and other gizmos OSD scan info of selected parameters is enabled here (red text). The currently active object (colored nodes) is the Rectangle object. Also enabled at time of this pdf data view export is the legend (scale bar and Z legend, below option). GXSMTTCh2 : channel number is 2. GXSMTTX+ Topo,* : this channel is in data acquiring mode, else here appears the path/filename GXSMTTQ1/5 : the data view is currently down-sized by factor of 5. GXSMTTShort[2] : the current data is of type short (2 bytes).","title":"Window title information"},{"location":"07_Gxsm-3.0-Visual/#popup-menu-gxsm-twod-popup","text":"Tthe GXSMPopupimage by clicking GXSMMouse3the image activates several convenient options and displaying tools: Activate : set the current window (channel) to active state (used for math, etc.). Autodisp : activates this window and performs an automatic scaling. Mode : switch the channel mode, see [sec:channels:dialog] {reference-type=\"ref\" reference=\"sec:channels:dialog\"}. File : load/save scan data in this channel,\\ load/save objects ( 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"}),\\ Get Info (about this scan, it has to be (re)loaded before, if it was currently acquired),\\ bring up a print dialog for this image,\\ close channel (removes this data from memory and closes the window).\\ The current view including all objects, legned(s), etc. can be exported as png bitmap and also as vector graphics as pdf - -this allows for example to use inkscape to edit the meta data and objects or simply remove them. Edit : Copy, Crop (a marked rectangle, creates a new scan), Zoom In/Out (use a rectangle object to select area to zoom in or zoom out to, it resizes data into a new scan). View : change view mode, see 1.1 {reference-type=\"ref\" reference=\"Gxsm-VModes\"}. Objects : set type of object to create, see 1.2.2.3 {reference-type=\"ref\" reference=\"Gxsm-VObjects\"}. Remove all removes all objects. Events : controls what kind of Events are displayed.","title":"Popup Menu {#Gxsm-TwoD-Popup}"},{"location":"07_Gxsm-3.0-Visual/#objects-gxsm-vobjects","text":"Only in the Grey 2D mode are coordinate measurements and selections available. Basic objects are Point, Line, Rectangle, PolyLine, Circle, Ksys (Coordinate System used for atom grid overlays/measuring and also new basic PAH molecule models can be selected) and Parabel. Some are available with the prefix \"Show\" in the menu, which means the data along a path, such as line, circle and in a case of a point the (possibly) available 3rd layered dimension in depth of scan, is shown using the profile view ( [Gxsm-Profile] {reference-type=\"ref\" reference=\"Gxsm-Profile\"}). Select between the different types of objects by the GXSMPopupObjects. You add an object by left-clicking into the 2D image. You can remove an object by clicking with the middle mouse button on it. [^3] You can remove all visible objects by GXSMPopupObjects/Remove all. By left-clicking on the object handlers you can modify them. In the case that the handlers are two small you can change their size in the menue GXSMMenuSettings/Prefereces. Look for the settings GXSMPrefGUIHandleLineWidth, GXSMPrefGUIHandleSize and GXSMPrefGUIObjectLineWidth. For getting the coordinates and Z-value of the mouse position, just hit the middle mouse button to get a cross hair pointer and move around to measure. You can switch the shown units from default unit to pixels using the toggle switch GXSMPopupGrey 2D viewView/Pixels. While moving objects, the objects properties coordinates (angle, length, ...) are shown in the status line of the window. This is useful for measurements, etc.. More precise measurements are possible using the Show Line object, which is updated on the fly while moving the line interactively across the image. Objects are also used to provide some math actions with coordinates. All object coordinates can be viewed and changed using the object popup menu (middle mouse button on object). The objects save/load (File menu of view popup) allows saving objects and reloading those later to any scan at absolute coordinates (including offset). While scanning is in progress the current scan-line can be viewed as profile, use GXSMPopupGrey 2D viewView/red Profile to toggle it on and off[^4].","title":"Objects {#Gxsm-VObjects}"},{"location":"07_Gxsm-3.0-Visual/#scan-events","text":"[]{#Gxsm-Events label=\"Gxsm-Events\"} Scan Events, available since GXSM-2.0 V1.6.0, can be any kind of Event or Experiment related to the current tip position and time. Per definition a GXSM \"Scan Event\" holds a position and possible more specific information like what happened. I.e a simple bias change (User-Event-Entry) or a full set of probe data (Prove-Event-Entry). The number of Events per scan is unlimited. And Events are always getting attached to the current active scan. The Scan Pop-up menu Events allows to show Probe Events or User Events. Because there can be many thousands of Probe Events using the automatic rastered probing, the displayed markers can be limited in number and distance from a certain point, indicated by middle-mouse clicking. Probe events are sourced by the SRanger Vector Probing (spectroscopy, manipulation, etc.), single and automatic (rastered). Enabling the displaying of Probe Events will add some controls to the scan window for selecting the range and number of Events to be displayed. Also the setup for data plotting shows up. -- to be completed --","title":"Scan Events"},{"location":"07_Gxsm-3.0-Visual/#tips","text":"Define you personal hot-keys with the pop-up, just select an pop-up entry and press a key! E.g: Set GXSMKey=,GXSMKey- for GXSMPopupGrey 2D viewView/zoom in,out!","title":"Tips"},{"location":"07_Gxsm-3.0-Visual/#view-surface-3d","text":"[]{#view:surface label=\"view:surface\"} A 3D model of the data, using the Z-value as height, can be viewed using the GL/Mesa renderer. Hardware acceleration is used by the GL subsystem if the X-server provides it. This works even while scanning, but consumes a lot of CPU power and slows the scanning process down.","title":"View \"Surface 3D\""},{"location":"07_Gxsm-3.0-Visual/#pop-up-menu","text":"The GXSMPopup3D view is activated by clicking GXSMMouse3the image. It includes some of the options already known from the Grey 2D popup menu, see 1.2.2.2 {reference-type=\"ref\" reference=\"Gxsm-TwoD-Popup\"}. The popup offers some options for controlling the 3D view: GXSMTTGL Options : Quick access to the display options\\ Zero Plane (enable/disable showing of the \"bottom box\"),\\ Mesh (use meshing instead of solid rendering),\\ GXSMTTScene Setup : Open the control panel for 3D Scene Setup, refer to next section. Using the mouse for rotation and translation is possible, but a bit unusual. First, set the window size not too huge and the rendering resolution (see Scene Setup) above 1 to speed up things. Then press the left mouse button and move the mouse carefully around for rotation. Use the middle button for translation. If you find this impractical, use the scene setup to set rotation and translation!","title":"Pop-up Menu"},{"location":"07_Gxsm-3.0-Visual/#scene-setup","text":"GXSMNotefew preliminary notes on 3D view setup This dialog allows a sophisticated 3D rendering configuration. Mouse/wheel motions: rot, distance, translation. See \\\"Help\\\" buttons! View : Setting of the model (surface) orientation and view. The coordinate system and view controls: scan xyz dimensions are mapped into a 1x1x1 cube (with y may have a aspect if non square) in GL coordinates (GL-XZ is Gxsm-surface plane), Z-scale (absolute, 1=max-value-1x1x1 cube dim or relative angstroem, 1 will scale Z the same as X.) RotationX/YZ : Setting of the model (surface) orientation in world space. RotationPreset : Select \\\"Top-View\\\", then elevation is above, and distance \\\"in front of center\\\"\\... if you rotate object/surface, it changes accordingly. And more default views as named. The \\\"Manual\\\" view will leave XYZ rotation settings untouched vs. pre sets which will reset the rotations to the selected view at any update. LookAt : Predefines look at positions. Translation : model translation in world space. FoV : Field of View. Distance : Distance from model center in \\\"Top-View\\\". Elevation : Elevation above model center in \\\"Top-View\\\". HeightScaleMode : Height scaling mode. Relative range: 1 equals full data range fits 1x1x1 cube. Absolute Range: only meaningful for XYZ data with same units. 1 equals Z scale matching X scale to fit 1x1x1 cube. GXSMNotefix typo in GUI Tskl : N/A SliceOffset : Z-Offset of slicing selection in volume mode. VertexSource : Flat: no displacement, Direct Height: data is used directly as displacement source, ViewMode Height: view mode transformed data is used. You must select the view more before entering the 3D View as data is loaded to the GPU only once. Note: Toggle 3D view back to 2D to update. y: experiments (N/A), Channel-X: Channel X data is used if available. X/Y/Z-slice: slicing views for volume data with value dimension. Switch to Volume Shader (ShadeModel=Volume) in Surface Material Tab. Volume: render 3D data as volume, also use Volume Shader. Scatter: experimental / cube projection, N/A. SliceLimiter : : Volume view define the detail and range for view aligned projection planes to be generated. A default cube data set will fit into a 0 .. 1000 range, typically 50..100 slices are sufficient, but you can opt for more detail. Computation intense. Example: $[start = 0, end =1000, step = 10, 0]$ To project beyond you can extend the ranges to for example $[-500, 1500, 10, 0]$ -- may be necessary to cover odd aspect ratio data. Also you can intentionally use it to \\\"cut-open\\\" a volume and only rend par of it - i.e. $[500, 1000, 10, 0]$! SlicePlanes : not used at this time. Light : Light sources are ambient and a single \\\"sun\\\" defined by a light direction vector. TipView: enable/disable rendering of a virtual \\\"tip\\\". Surface Material : Color mapping/shading: data is always automatically mapped into a 0..1 full scale range equivalent. Gxsm palette is mapped to 0..1 full range. Controls are offset and scale. Advanced multi dim data handling (you need a value-dimension with data) if data is in \\\"time\\\" you can run the transformation plugin \\\"multi-dim transpose\\\" to swap time to value. Slicing and volume view, and the use of transparency settings. Additional transparency for blending. The transfer function for (1-alpha) blending is transparenceoffset+transparencyscale\\*value. Using Palette color as above. Annotations : Title, Labels, etc. Render Opt. : Ortho : Orthographic projection is used when set to true. TessLevel : Use the render option \\\"TessLevel\\\" to control the tesselation level, i.e. the detail of rendering. A default triangulated flat base plane spawning a 128x128 grid is used and is subdivided on GPU level up to $64\\times$ controlled by the tesselation factor. On GPU level the selected data as used for height field displacements any any resulting given resolution given by the tesselation factor. Only if that happens not to be sufficient you should increase the \\\"BasePlaneGrid\\\" size, but there is usually no need to do so as $128 \\times 64$ is bigger than most data sets pixel resolution. Not recommended for performance reasons. You may even want to reduce this for less powerful GL hardware. For this change (BasePlaneGrid only) to take effect you have to click apply and close/reopen the 3D view to rebuild the new geometry. BasePlaneGrid : See TessLevel. ProbeAtoms : Number \\\"atoms\\\" created for tip visualization. Mesh : false: regular 3D rendering. true: use a mesh. ShadingMode : Debug Shader only. Debugging and special shading mode/experimental and customizable for GL experts to play with. You can hack even the tess-fragment.glsl shader for custom fun! ClearColor : Select the scene backgound color. Fog\\... : Fog settings -- debug shader only, use debug shader, and debug mode \\\"5\\\" to apply fog. Cull : Culling means back side triangles of the surface (hidden in top view) are never drawn, mean if you look from below, it's like an roof with no shingles.. faster and normally better. Just disabled in volume/slicing mode obviously..","title":"Scene Setup"},{"location":"07_Gxsm-3.0-Visual/#the-general-purpose-profile-1d-view","text":"[]{#Gxsm-Profile label=\"Gxsm-Profile\"} For several purposes Gxsm can show data using the a general purpose Profile -View representation (XY-plot). GXSMScreenShotShowLineProfile as used by the Show-Line object (old version gxsm2). GXSMScreenShotanalysis-2d-profile-measuring-1dGxsm3 Profile View of data section with cursors A,B eneabled for measuring. In the view-mode Profile 1D it shows the currently measured line or the first or via popup menu ( Data Select /...) selected line of the data set. The All option loads all profiles at once, be careful using this with huge scan (lots of memory needed). The scaling is (with respect to shown tickmarks) only correct for all profiles, if the option Y Scaling/hold or Y Scaling/expand only is activated[^5].","title":"The general purpose \"Profile 1D\" view"},{"location":"07_Gxsm-3.0-Visual/#pop-up-menu_1","text":"The popup menu of the Profile View offer the folowing options: File : File operations: Open, Save : File handling. Print : Printing via script. See subsection Profile Printing. Activate : If used as \"channel view\", to activate this scan. Options : This menu provides toggle buttons for the following display options:\\ Y lineregression : Enable to use a \"on-the-fly\" line regression. Symbols : GXSMNA Legend : GXSMNA Tickmarks : Enable display of tickmarks no Gridlines : Disable gridlines Y Scaling : Several Y scaling options[^6]: Y logarithmic : Set Y axis to logarithmic scale. Y hold : Hold Y scale (prevents automatic rescaling). Y expand only : Expand Y scale only. Y auto : Force auto scale. ... : A set of manual Y offset shift (move upper/lower bound) and Y zooming (in/out) options. GXSMHintFor quicker adjusting pull of the menu (drag the menu apart by clicking the dashed line) and place it beside! X Scaling : GXSMNA Cursor : This menu allows to enable up to two cross hair cursers (blue and green). Use the left mouse button to dragg the cursors around, click on the vertical cursor line to grab it! The status line will show (one cursor) the coordinates or (two cursors) the differential coordinates for measurements.\\ The Cursor menu (tear it off!) allows to auto position the cursor on local minima or maxima to the left or right of the current position. Or just to skip to the next/previous data point. Data Select : Select/walk through a set of multiple data lines or show all.\\ GXSMNoteOnce selected all, you can't undo this yet, reopen the \"Profile View\" therefore.","title":"Pop-up Menu"},{"location":"07_Gxsm-3.0-Visual/#1d-data-file-format","text":"Via the File menu the profie data can be saved in Ascii format. The file is preceeded by a simple header using commentary lines and a keyword. The data itself follows using the following format: Height Profile Data: # ASC LineProfile Data # Date: Tue Jun 18 17:21:42 2002 # FileName: /tmp/HutProfile.asc # Len = 405.843A # tStart= 1016686983s # tEnd = 1016687662s # phi = 39.9441\\B0 # dX = 0.235244A # dY = -0.197002A # dZ = 0.0139465A # Xo = -1079.55A # Yo = 0A # Anz = 1323 # NSets = 1 # Xunit = A # Xalias= AA # Xlabel= L # Yunit = A # Yalias= AA # Ylabel= Z # Title = title not set # Format= X[index*LineLen/Nx] Z[DA]... InUnit: X[Xunit] Z[Zunit]... 0 -103 InUnits: 0 -1.43649 0.30676 -105 InUnits: 0.306992 -1.46439 0.613519 -107 InUnits: 0.613983 -1.49228 0.920279 -107 InUnits: 0.920975 -1.49228 1.22704 -106 InUnits: 1.22797 -1.47833 1.5338 -104 InUnits: 1.53496 -1.45044 ... STS Data: # ASC LineProfile Data # Date: Tue Jun 18 17:24:59 2002 # FileName: /tmp/STS.asc # Len = 0A # tStart= 1024442686s # tEnd = 1024442686s # phi = 0\\B0 # dX = 0A # dY = 0A # dZ = 1A # Xo = 0A # Yo = 0A # Anz = 500 # NSets = 2 # Xunit = V # Xalias= V # Xlabel= Bias # Yunit = nA # Yalias= nA # Ylabel= I # Title = STS [local Spectroscopy] # Format= X[index*LineLen/Nx] Z[DA]... InUnit: X[Xunit] Z[Zunit]... 0 0 0 InUnits: -2 0 0 0.02 0 0 InUnits: -1.99198 0 0 0.04 0 0 InUnits: -1.98397 0 0 0.06 0 0 InUnits: -1.97595 0 0 0.08 0 0 InUnits: -1.96794 0 0 ... Simple Shell Script for extracting just X and Y data: #!/bin/bash for file do awk '{ if ($1 != \"#\") { print $5, $6}}' $file > $file.dat1 done Gxsm can reload this type of files using just the Open command. The file should have the extension to be recognized as a profile data set.","title":"1D data file format"},{"location":"07_Gxsm-3.0-Visual/#profile-printing","text":"Starting from the File menu you will find the Print -entry. From here you have access to six user commands. This commands are simple shell scripts that receive a temporarily created version of the 1D profile as argument and can do various things with this profile (not only print). There are six example scripts in the profileplot subdirectory. The first script runs gri to process your profile and will create a postscript file of your print. The second script runs gri to process your profile and will create a postscript file of your print. The data are modified with an embedded Python script to calculate STS. The third script runs gri to process your profile and will create a postscript file of your print. The y-axis is log'ed here. The fourth script runs gri to process your profile and will create a postscript file of your print. This is a copy of the first script. Use this to experiment. The fifth script runs xmgrace to show your profile. Remember that Gxsm will freeze while xmgrace is running, so don't use this option as long as a scan is running. The sixth script runs python -matplot to show your profile. You can export to many bitmap formats from this. Python-matplot is not (yet; check it out) part of debian testing (Feb 05)[^7]. These scripts can run standalone (i. e. without Gxsm running). Simply run them with an ASCII-1D-profile as argument like this: /path/gxsmplot1d-1.gri.sh myprofile.asc One can think of many different things these scripts are capable of. They can run any calculation on the profiles. These scripts are designed to run together with the Show Line option, not with the 1-D profile view in the channel selector. If you use the latter you will always receive a plot of line 0. You can run your own scripts by modifying the entries User/command[1..6] in the preferences. [^1]: 1. Palette Editor, 2. fill the picture with 1024x1 pixel, 3. save as MyPalette.pnm (ascii-type). [^2]: The list of objects is currently not autoupdating (Gxsm-2 1.40.0 'Sandy Experiment') [^3]: If your notebook or mouse has just two buttons click both at the same time. [^4]: Showing the profile while scanning can delay the scanning process on slower machines, so switch it off if not needed! To save CPU power you can disable auto-scaling and tick marks in the profile view. [^5]: There is a bug with refreshing the toggle indicators to the initial setting upon first menu activation, to make sure the setting is correct please toggle the option once! Gxsm saves the last setting of all these option. [^6]: in case no data is appearing, one of the following conditions may be present: negative values (using log.) or zero Y or X range. [^7]: Follow the instructions on the matplotlib-website for installing. It's easy. Simply add one line to /etc/apt/sources.list and run apt-get update && apt-get install python-matplotlib","title":"Profile Printing"},{"location":"08_Gxsm-3.0-Config/","text":"Configuration {#ch:config} All your settings are saved using the gconf database[^1]. The configuration druid uses the gconf-database and the save-values command will rewrite it, just like the and button in the preferences. With special care the gconf database can be edited, to set defaultvalues. To restore a totally screwed configuration simply remove it. The next time you start the configuration wizard will pop up to create your settings from the defaults. With Settings/Preferences (dt: Einstellungen/Einstellungen) can be configured during runtime, the changes are (as seen above) saved in . This file can be copied to any new user, who wants to share the same instrument. Any of the settings provides a small help text for your information. Hardware folder {#sec:conf:hardware} Hardware/Card : Choose hardware: see also section [sec:HwI-PlugIns] {reference-type=\"ref\" reference=\"sec:HwI-PlugIns\"} about Hardware-Interface (HwI) plug-ins for specific details.) : no hardware connected, for data analysis, using internal dummy-mode. : Signal Ranger is connected, a running SPM DSP code is expected. : A Intelligent Scanning Probe Hardware Module is expected at the device. (pci32.o, pc31.o at /dev/pcdsp (see later) + running on DSP interface board : use the RHK internet device ... : some more experimental HwI modules may show up. Hardware/Device : Path to the device used by the specific hardware. Typical are , , ... Instrument folder {#sec:conf:instr} Instrument/Type : Select one of STM, AFM, SARLS, SPALEED, CCD. This determines the of the main window. Instrument/Name : Any name you want to associate with your instrument. Please limit to 30 characters. Inst-SPM folder Instrument/X,Y,ZPiezoAV : SPM Piezo sensitivity in A/V. Instrument/BiasGain : Gain of the bias-volatge. Instrument/nAmpere2Volt : Tunnel amplifier sensitivity: Instrument/nNewton2Volt : for AFM Setpoint in nN, 1 for 1nN = 1V Instrument/dHertz2Volt : NC AFM Setpoint Instrument/ScanOrgCenter : Specific to hardware setup Analog/DigRangeIn : positive maximum value for X,Y,Z,...AD-conversion with respect to VoltMaxIn. The converters have to be bipolar (e.g. $\\pm 10\\;$V) Analog/VoltMaxIn : AD Voltage corresponding to DigRangeIn Analog/DigRangeOut : positive maximum value for X,Y,Z,...DA-conversion with respect to VoltMaxOut. The converters have to be bipolar (e.g. $\\pm 10\\;$V) Analog/VoltMaxOut : DA Voltage corresponding to DigRangeOut Analog/V1-V9 : Piezoamplifier Settings, typically: 1,2,5,10,15. Analog/VX/Y/Zdefault : Preferences at for programm startup gain selections Analog/VX0/Y0/Z0default : Preferences for programm startup gain selections for Offset, only essential if analog offset adding is used. Inst-SPA folder Instrument/X,YCalibV : SPALEED: X,Y calibration factor, 1V at DA $\\rightarrow$ $\\pm 10\\;$V resp. $15\\;$V at octopol front/back. Instrument/EnergyCalibVeV : factor*Volt = energy in eV Instrument/Sensitivity : $\\textrm{BZ} = \\textrm{U} \\cdot \\textrm{Sensitivity} / \\sqrt{\\textrm{Energy}[\\textrm{eV}]}$ Instrument/ThetaChGunInt : Half angle between channeltron and electron gun (intern). Instrument/ThetaChGunExt : unused. Sample/LayerDist : Atom layer distance of the sample in \u00c5ngstroem, used for calculation of phase (energy in ). Sample/UnitLen : unused. DataAq folder In this section deals with the assignment of data sources to GXSM channels. The particular configuration depends on your data acquisition hardware and is unique for each instrument. The following explanations are based on the Signal Ranger DSP board. GXSMNoteFor historic reasons the analog data source channels are grouped in blocks of four (A,B) inputs, this was due to the old PCI32 DSP board [^2] has four A/D-converters with four input-lines directly connected. The even older PC31 has only two A/D-connectors, but four input-lines are adressed to each of them via a 4x-multiplexer, which results in eight usable analog input lines. Name convention in the x-resources is A and B for the converters and 1 to 4 for the four multiplexer input lines (PC31). The PCI32 has four converters which are called A1, A2, A3 and A4. For the Signal Ranger board the hardware channel assignment to the GXSM data sources is defined as shown here: ::: {#tab:preferences:dataaq} Channel Descriptor Name Notes DataAq/PIDSrcA1 Topo,* Z: generated by the Feedback DataAq/PIDSrcA2...4 --- not used DataAq/DataSrcA1 AIC5 AIC5: I, Force, dFrq, ...what is used as feedback signal DataAq/DataSrcA2 AIC0 AIC0 input (Fric) DataAq/DataSrcA3 AIC1 AIC1 input (Damp., opt. FUZZY source) DataAq/DataSrcA4 AIC2 AIC2 input DataAq/DataSrcB1 AIC3 AIC3 input DataAq/DataSrcB2 AIC4 AIC4 input DataAq/DataSrcB3 AIC5 AIC5 input DataAq/DataSrcB4 AIC6 AIC6 input DataAq/DataSrcC1 dIdV LockIn 1st of AIC5 (32bit) DataAq/DataSrcD1 ddIdV LockIn 2nd of AIC5 (32bit) DataAq/DataSrcE1 I0 test:FB-Integrator (LockIn-I0 avg) (32bit) DataAq/DataSrcF1 Counter SR-CoolRunner Counter if equipped (experimental) (32bit) : Signal Ranger board the hardware channel to GXSM data sources assignment definitions. I0, Counter are experimental and may change any time ::: The field \"Name\" can be used to give the input a real name instead of \"AIC0\" you can used \"PLL-dF\" or what ever you like. Do not use a \",\" except for \",*\" to set a default, the text behind it will be ignored. GXSMHintFor you hackers, check out the SR code, push_area_scan_data() in\\ GXSMFileSRanger/TiCC-project-files/FB_spmcontrol/FB_spm_areascan.c. Probe folder -- obsolete -- Folder Adj. -- obsolete -- see Entry-Popup menu! Configuration of Value-Slider: Adjustments.Name/min,max for Area (please care for min $<$ max !!), Adjustments.Name/step,page for stepwidth at Cursor, Click. Paths folder Path/Logfiles : Path/Data : Path/RemoteFifo : path to remote fifo (read only by GXSM) Path/RemoteFifoOut : path to control fifo (wo by GXSM) Path/Plugins : Additional Plugin searchpath User folder User/SaveWindowGeometry : Always , for future use... User/Unit : XYZ-Einheit: Choice of AA, nm, um, mm, BZ, sec, V, 1 User/HiLoDelta : Checking distance of array for calculation of Min/Max for Autodisplay, 1 = all points visited. User/FileType : ( possible, but out of date.) User/NameConvention : : Auto enumeration with 001, 002, ..., : Auto enumeration with aaa, aab, ... User/SliderControlType : : Omicron Slider Control, : Besocke User/Palette : path to palette image (may be altered at runtime) See also ... GUI folder GUI/layerfields : Select here, if you want use layered (3d) scans. [^1]: GConf: try the gconf-editor to explore the GXSM settings, path: /apps/gxsm2! [^2]: The old PCI32 DSP card is still supported by GXSM, but some limits apply and it's less and less tested with newer GXSM versions.","title":"Config"},{"location":"08_Gxsm-3.0-Config/#configuration-chconfig","text":"All your settings are saved using the gconf database[^1]. The configuration druid uses the gconf-database and the save-values command will rewrite it, just like the and button in the preferences. With special care the gconf database can be edited, to set defaultvalues. To restore a totally screwed configuration simply remove it. The next time you start the configuration wizard will pop up to create your settings from the defaults. With Settings/Preferences (dt: Einstellungen/Einstellungen) can be configured during runtime, the changes are (as seen above) saved in . This file can be copied to any new user, who wants to share the same instrument. Any of the settings provides a small help text for your information.","title":"Configuration {#ch:config}"},{"location":"08_Gxsm-3.0-Config/#hardware-folder-secconfhardware","text":"Hardware/Card : Choose hardware: see also section [sec:HwI-PlugIns] {reference-type=\"ref\" reference=\"sec:HwI-PlugIns\"} about Hardware-Interface (HwI) plug-ins for specific details.) : no hardware connected, for data analysis, using internal dummy-mode. : Signal Ranger is connected, a running SPM DSP code is expected. : A Intelligent Scanning Probe Hardware Module is expected at the device. (pci32.o, pc31.o at /dev/pcdsp (see later) + running on DSP interface board : use the RHK internet device ... : some more experimental HwI modules may show up. Hardware/Device : Path to the device used by the specific hardware. Typical are , , ...","title":"Hardware folder {#sec:conf:hardware}"},{"location":"08_Gxsm-3.0-Config/#instrument-folder-secconfinstr","text":"Instrument/Type : Select one of STM, AFM, SARLS, SPALEED, CCD. This determines the of the main window. Instrument/Name : Any name you want to associate with your instrument. Please limit to 30 characters.","title":"Instrument folder {#sec:conf:instr}"},{"location":"08_Gxsm-3.0-Config/#inst-spm-folder","text":"Instrument/X,Y,ZPiezoAV : SPM Piezo sensitivity in A/V. Instrument/BiasGain : Gain of the bias-volatge. Instrument/nAmpere2Volt : Tunnel amplifier sensitivity: Instrument/nNewton2Volt : for AFM Setpoint in nN, 1 for 1nN = 1V Instrument/dHertz2Volt : NC AFM Setpoint Instrument/ScanOrgCenter : Specific to hardware setup Analog/DigRangeIn : positive maximum value for X,Y,Z,...AD-conversion with respect to VoltMaxIn. The converters have to be bipolar (e.g. $\\pm 10\\;$V) Analog/VoltMaxIn : AD Voltage corresponding to DigRangeIn Analog/DigRangeOut : positive maximum value for X,Y,Z,...DA-conversion with respect to VoltMaxOut. The converters have to be bipolar (e.g. $\\pm 10\\;$V) Analog/VoltMaxOut : DA Voltage corresponding to DigRangeOut Analog/V1-V9 : Piezoamplifier Settings, typically: 1,2,5,10,15. Analog/VX/Y/Zdefault : Preferences at for programm startup gain selections Analog/VX0/Y0/Z0default : Preferences for programm startup gain selections for Offset, only essential if analog offset adding is used.","title":"Inst-SPM folder"},{"location":"08_Gxsm-3.0-Config/#inst-spa-folder","text":"Instrument/X,YCalibV : SPALEED: X,Y calibration factor, 1V at DA $\\rightarrow$ $\\pm 10\\;$V resp. $15\\;$V at octopol front/back. Instrument/EnergyCalibVeV : factor*Volt = energy in eV Instrument/Sensitivity : $\\textrm{BZ} = \\textrm{U} \\cdot \\textrm{Sensitivity} / \\sqrt{\\textrm{Energy}[\\textrm{eV}]}$ Instrument/ThetaChGunInt : Half angle between channeltron and electron gun (intern). Instrument/ThetaChGunExt : unused. Sample/LayerDist : Atom layer distance of the sample in \u00c5ngstroem, used for calculation of phase (energy in ). Sample/UnitLen : unused.","title":"Inst-SPA folder"},{"location":"08_Gxsm-3.0-Config/#dataaq-folder","text":"In this section deals with the assignment of data sources to GXSM channels. The particular configuration depends on your data acquisition hardware and is unique for each instrument. The following explanations are based on the Signal Ranger DSP board. GXSMNoteFor historic reasons the analog data source channels are grouped in blocks of four (A,B) inputs, this was due to the old PCI32 DSP board [^2] has four A/D-converters with four input-lines directly connected. The even older PC31 has only two A/D-connectors, but four input-lines are adressed to each of them via a 4x-multiplexer, which results in eight usable analog input lines. Name convention in the x-resources is A and B for the converters and 1 to 4 for the four multiplexer input lines (PC31). The PCI32 has four converters which are called A1, A2, A3 and A4. For the Signal Ranger board the hardware channel assignment to the GXSM data sources is defined as shown here: ::: {#tab:preferences:dataaq} Channel Descriptor Name Notes DataAq/PIDSrcA1 Topo,* Z: generated by the Feedback DataAq/PIDSrcA2...4 --- not used DataAq/DataSrcA1 AIC5 AIC5: I, Force, dFrq, ...what is used as feedback signal DataAq/DataSrcA2 AIC0 AIC0 input (Fric) DataAq/DataSrcA3 AIC1 AIC1 input (Damp., opt. FUZZY source) DataAq/DataSrcA4 AIC2 AIC2 input DataAq/DataSrcB1 AIC3 AIC3 input DataAq/DataSrcB2 AIC4 AIC4 input DataAq/DataSrcB3 AIC5 AIC5 input DataAq/DataSrcB4 AIC6 AIC6 input DataAq/DataSrcC1 dIdV LockIn 1st of AIC5 (32bit) DataAq/DataSrcD1 ddIdV LockIn 2nd of AIC5 (32bit) DataAq/DataSrcE1 I0 test:FB-Integrator (LockIn-I0 avg) (32bit) DataAq/DataSrcF1 Counter SR-CoolRunner Counter if equipped (experimental) (32bit) : Signal Ranger board the hardware channel to GXSM data sources assignment definitions. I0, Counter are experimental and may change any time ::: The field \"Name\" can be used to give the input a real name instead of \"AIC0\" you can used \"PLL-dF\" or what ever you like. Do not use a \",\" except for \",*\" to set a default, the text behind it will be ignored. GXSMHintFor you hackers, check out the SR code, push_area_scan_data() in\\ GXSMFileSRanger/TiCC-project-files/FB_spmcontrol/FB_spm_areascan.c.","title":"DataAq folder"},{"location":"08_Gxsm-3.0-Config/#probe-folder","text":"-- obsolete --","title":"Probe folder"},{"location":"08_Gxsm-3.0-Config/#folder-adj","text":"-- obsolete -- see Entry-Popup menu! Configuration of Value-Slider: Adjustments.Name/min,max for Area (please care for min $<$ max !!), Adjustments.Name/step,page for stepwidth at Cursor, Click.","title":"Folder Adj."},{"location":"08_Gxsm-3.0-Config/#paths-folder","text":"Path/Logfiles : Path/Data : Path/RemoteFifo : path to remote fifo (read only by GXSM) Path/RemoteFifoOut : path to control fifo (wo by GXSM) Path/Plugins : Additional Plugin searchpath","title":"Paths folder"},{"location":"08_Gxsm-3.0-Config/#user-folder","text":"User/SaveWindowGeometry : Always , for future use... User/Unit : XYZ-Einheit: Choice of AA, nm, um, mm, BZ, sec, V, 1 User/HiLoDelta : Checking distance of array for calculation of Min/Max for Autodisplay, 1 = all points visited. User/FileType : ( possible, but out of date.) User/NameConvention : : Auto enumeration with 001, 002, ..., : Auto enumeration with aaa, aab, ... User/SliderControlType : : Omicron Slider Control, : Besocke User/Palette : path to palette image (may be altered at runtime) See also ...","title":"User folder"},{"location":"08_Gxsm-3.0-Config/#gui-folder","text":"GUI/layerfields : Select here, if you want use layered (3d) scans. [^1]: GConf: try the gconf-editor to explore the GXSM settings, path: /apps/gxsm2! [^2]: The old PCI32 DSP card is still supported by GXSM, but some limits apply and it's less and less tested with newer GXSM versions.","title":"GUI folder"},{"location":"99-Gxsm-3.0-gpl/","text":"Terms and conditions {#app:gpl} GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 ::: center Copyright \u00a9 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. ::: ::: center Preamble ::: The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. ::: center [Terms and Conditions]{.smallcaps} ::: Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: The work must carry prominent notices stating that you modified it, and giving a relevant date. The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or Limiting the use for publicity purposes of names of licensors or authors of the material; or Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. ::: center [End of Terms and Conditions]{.smallcaps} How to Apply These Terms to Your New Programs ::: If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <textyear> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"License"},{"location":"99-Gxsm-3.0-gpl/#terms-and-conditions-appgpl","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 ::: center Copyright \u00a9 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. ::: ::: center Preamble ::: The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. ::: center [Terms and Conditions]{.smallcaps} ::: Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: The work must carry prominent notices stating that you modified it, and giving a relevant date. The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or Limiting the use for publicity purposes of names of licensors or authors of the material; or Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. ::: center [End of Terms and Conditions]{.smallcaps} How to Apply These Terms to Your New Programs ::: If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <textyear> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Terms and conditions {#app:gpl}"}]}